// üß™ Script de Teste - Recarregamento Discreto
// Execute este script no console do navegador para testar as melhorias

console.log('üéØ Testando melhorias de recarregamento discreto...');

// Fun√ß√£o para simular polling discreto
function testarPollingDiscreto() {
  console.log('üîÑ Testando polling discreto...');
  
  // Verificar se o modal est√° aberto
  const modal = document.querySelector('[data-testid="unified-chat-modal"]') || 
                document.querySelector('.chat-modal');
  
  if (!modal) {
    console.log('‚ùå Modal de chat n√£o encontrado. Abra um chat primeiro.');
    return;
  }
  
  console.log('‚úÖ Modal encontrado, verificando indicadores...');
  
  // Verificar indicadores de atualiza√ß√£o
  const indicadorAtualizacao = modal.querySelector('.bg-blue-500.animate-pulse');
  const indicadorTexto = modal.querySelector('.text-xs.text-gray-600');
  
  if (indicadorAtualizacao) {
    console.log('‚úÖ Indicador de atualiza√ß√£o encontrado');
  } else {
    console.log('‚ÑπÔ∏è Indicador de atualiza√ß√£o n√£o est√° vis√≠vel (normal durante polling)');
  }
  
  if (indicadorTexto && indicadorTexto.textContent?.includes('Atualizando')) {
    console.log('‚úÖ Texto "Atualizando..." encontrado');
  }
  
  console.log('üìä Aguarde 3-5 segundos para ver o polling em a√ß√£o...');
}

// Fun√ß√£o para testar transi√ß√µes suaves
function testarTransicoesSuaves() {
  console.log('üé® Testando transi√ß√µes suaves...');
  
  const scrollArea = document.querySelector('[data-radix-scroll-area-viewport]') ||
                    document.querySelector('.scroll-area');
  
  if (scrollArea) {
    console.log('‚úÖ √Årea de scroll encontrada');
    
    // Verificar se tem transi√ß√µes CSS
    const computedStyle = window.getComputedStyle(scrollArea);
    const transition = computedStyle.transition;
    
    if (transition && transition.includes('opacity')) {
      console.log('‚úÖ Transi√ß√µes de opacity configuradas:', transition);
    } else {
      console.log('‚ö†Ô∏è Transi√ß√µes n√£o encontradas');
    }
  } else {
    console.log('‚ùå √Årea de scroll n√£o encontrada');
  }
}

// Fun√ß√£o para testar anima√ß√µes de novas mensagens
function testarAnimacoesMensagens() {
  console.log('‚ú® Testando anima√ß√µes de mensagens...');
  
  const mensagens = document.querySelectorAll('[data-message-bubble]') ||
                   document.querySelectorAll('.message-bubble');
  
  if (mensagens.length > 0) {
    console.log(`‚úÖ ${mensagens.length} mensagens encontradas`);
    
    // Verificar se mensagens t√™m classes de anima√ß√£o
    const mensagensComAnimacao = Array.from(mensagens).filter(msg => 
      msg.classList.contains('animate-in') || 
      msg.classList.contains('slide-in-from-bottom-2') ||
      msg.classList.contains('fade-in-0')
    );
    
    if (mensagensComAnimacao.length > 0) {
      console.log(`‚úÖ ${mensagensComAnimacao.length} mensagens com anima√ß√µes`);
    } else {
      console.log('‚ÑπÔ∏è Mensagens sem anima√ß√µes (normal se n√£o s√£o novas)');
    }
  } else {
    console.log('‚ÑπÔ∏è Nenhuma mensagem encontrada (normal se chat vazio)');
  }
}

// Fun√ß√£o para testar scroll inteligente
function testarScrollInteligente() {
  console.log('üìú Testando scroll inteligente...');
  
  const scrollArea = document.querySelector('[data-radix-scroll-area-viewport]') ||
                    document.querySelector('.scroll-area');
  
  if (scrollArea) {
    const { scrollTop, scrollHeight, clientHeight } = scrollArea;
    const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;
    
    console.log(`üìä Posi√ß√£o do scroll: ${scrollTop}/${scrollHeight} (${clientHeight}px vis√≠vel)`);
    console.log(`üìç Pr√≥ximo do final: ${isNearBottom ? 'Sim' : 'N√£o'}`);
    
    // Verificar bot√£o de scroll para baixo
    const botaoScroll = document.querySelector('[data-scroll-to-bottom]') ||
                       document.querySelector('.scroll-to-bottom-button');
    
    if (botaoScroll) {
      console.log('‚úÖ Bot√£o de scroll para baixo encontrado');
    } else if (!isNearBottom) {
      console.log('‚ÑπÔ∏è Bot√£o de scroll n√£o vis√≠vel (normal se pr√≥ximo do final)');
    }
  }
}

// Fun√ß√£o para testar indicadores de √∫ltima atualiza√ß√£o
function testarIndicadoresAtualizacao() {
  console.log('üïí Testando indicadores de √∫ltima atualiza√ß√£o...');
  
  const indicadorTempo = document.querySelector('.text-xs.text-gray-400');
  
  if (indicadorTempo && indicadorTempo.textContent?.includes('√öltima atualiza√ß√£o')) {
    console.log('‚úÖ Indicador de √∫ltima atualiza√ß√£o encontrado');
    console.log('üìù Texto:', indicadorTempo.textContent);
  } else {
    console.log('‚ÑπÔ∏è Indicador de √∫ltima atualiza√ß√£o n√£o vis√≠vel (normal se n√£o houve atualiza√ß√µes)');
  }
}

// Fun√ß√£o para simular nova mensagem
function simularNovaMensagem() {
  console.log('üì® Simulando nova mensagem...');
  
  // Tentar encontrar √°rea de mensagens
  const areaMensagens = document.querySelector('.space-y-3.py-4') ||
                       document.querySelector('[data-messages-area]');
  
  if (areaMensagens) {
    console.log('‚úÖ √Årea de mensagens encontrada');
    console.log('üí° Para testar anima√ß√µes, aguarde uma nova mensagem real ou simule via WebSocket');
  } else {
    console.log('‚ùå √Årea de mensagens n√£o encontrada');
  }
}

// Fun√ß√£o principal de teste
function executarTesteCompleto() {
  console.log('üöÄ Iniciando teste completo de recarregamento discreto...\n');
  
  testarPollingDiscreto();
  console.log('');
  
  testarTransicoesSuaves();
  console.log('');
  
  testarAnimacoesMensagens();
  console.log('');
  
  testarScrollInteligente();
  console.log('');
  
  testarIndicadoresAtualizacao();
  console.log('');
  
  simularNovaMensagem();
  console.log('');
  
  console.log('‚úÖ Teste completo finalizado!');
  console.log('üí° Dicas:');
  console.log('   - Aguarde 3-5s para ver o polling discreto');
  console.log('   - Scroll para cima para ver o bot√£o de scroll para baixo');
  console.log('   - Envie uma mensagem para testar anima√ß√µes');
  console.log('   - Observe os indicadores sutis durante atualiza√ß√µes');
}

// Fun√ß√£o para monitorar mudan√ßas em tempo real
function monitorarMudancas() {
  console.log('üëÄ Iniciando monitoramento de mudan√ßas...');
  
  let contadorMudancas = 0;
  
  // Observer para mudan√ßas no DOM
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        contadorMudancas++;
        console.log(`üîÑ Mudan√ßa #${contadorMudancas} detectada:`, {
          tipo: 'DOM',
          timestamp: new Date().toLocaleTimeString(),
          nodes: mutation.addedNodes.length + ' adicionados, ' + mutation.removedNodes.length + ' removidos'
        });
      }
    });
  });
  
  const modal = document.querySelector('[data-testid="unified-chat-modal"]') || 
                document.querySelector('.chat-modal');
  
  if (modal) {
    observer.observe(modal, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'style']
    });
    
    console.log('‚úÖ Monitoramento ativo. Pressione Ctrl+C para parar.');
    
    // Parar ap√≥s 30 segundos
    setTimeout(() => {
      observer.disconnect();
      console.log('‚è∞ Monitoramento finalizado ap√≥s 30 segundos');
    }, 30000);
  } else {
    console.log('‚ùå Modal n√£o encontrado para monitoramento');
  }
}

// Expor fun√ß√µes globalmente
window.testarRecarregamentoDiscreto = {
  executarTesteCompleto,
  testarPollingDiscreto,
  testarTransicoesSuaves,
  testarAnimacoesMensagens,
  testarScrollInteligente,
  testarIndicadoresAtualizacao,
  simularNovaMensagem,
  monitorarMudancas
};

console.log('üéØ Fun√ß√µes de teste dispon√≠veis:');
console.log('   window.testarRecarregamentoDiscreto.executarTesteCompleto()');
console.log('   window.testarRecarregamentoDiscreto.monitorarMudancas()');
console.log('   window.testarRecarregamentoDiscreto.testarPollingDiscreto()');
console.log('   // ... e outras fun√ß√µes individuais');

// Executar teste autom√°tico se modal estiver aberto
setTimeout(() => {
  const modal = document.querySelector('[data-testid="unified-chat-modal"]') || 
                document.querySelector('.chat-modal');
  
  if (modal) {
    console.log('üéØ Modal detectado! Executando teste autom√°tico...');
    executarTesteCompleto();
  } else {
    console.log('üí° Abra um chat para executar o teste autom√°tico');
  }
}, 1000); 