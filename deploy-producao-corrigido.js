const fs = require('fs');
const path = require('path');

console.log('üöÄ DEPLOY PRODU√á√ÉO CORRIGIDO');
console.log('=============================');

// 1. Verificar arquivo local corrigido
const localFile = path.join(__dirname, 'backend', 'webhooks', 'webhook-evolution-websocket.js');
const productionFile = path.join(__dirname, 'deploy-webhook', 'webhook-evolution-complete-corrigido.cjs');

console.log('1. üìÅ Verificando arquivos...');
console.log('   Local:', localFile);
console.log('   Produ√ß√£o:', productionFile);

if (!fs.existsSync(localFile)) {
  console.log('‚ùå Arquivo local n√£o encontrado');
  process.exit(1);
}

// 2. Ler e verificar corre√ß√µes
console.log('\n2. üìñ Verificando corre√ß√µes...');
const localContent = fs.readFileSync(localFile, 'utf8');

const hasCorrections = localContent.includes('[PRODU√á√ÉO]') && 
                      localContent.includes('CORRE√á√ÉO: Processar MESSAGES_UPSERT') &&
                      localContent.includes('broadcastToTicket');

if (!hasCorrections) {
  console.log('‚ùå Corre√ß√µes n√£o encontradas no arquivo local');
  console.log('üí° Execute a corre√ß√£o primeiro');
  process.exit(1);
}

console.log('‚úÖ Corre√ß√µes encontradas no arquivo local');

// 3. Copiar para produ√ß√£o
console.log('\n3. üìã Copiando para produ√ß√£o...');
try {
  // Converter para CommonJS se necess√°rio
  let productionContent = localContent;
  
  // Substituir imports ES6 por require se necess√°rio
  if (productionContent.includes('import')) {
    productionContent = productionContent
      .replace(/import\s+(\w+)\s+from\s+['"]([^'"]+)['"]/g, "const $1 = require('$2')")
      .replace(/import\s*{([^}]+)}\s+from\s+['"]([^'"]+)['"]/g, "const {$1} = require('$2')");
  }
  
  fs.writeFileSync(productionFile, productionContent);
  console.log('‚úÖ Arquivo copiado para produ√ß√£o');
  
} catch (error) {
  console.log('‚ùå Erro ao copiar:', error.message);
  process.exit(1);
}

// 4. Criar script de teste para produ√ß√£o
console.log('\n4. üß™ Criando script de teste para produ√ß√£o...');

const testScript = `
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testarProducaoCorrigido() {
  console.log('üß™ TESTANDO PRODU√á√ÉO CORRIGIDO');
  console.log('==============================');
  
  const payload = {
    event: 'MESSAGES_UPSERT',
    instance: 'atendimento-ao-cliente-suporte',
    data: {
      key: {
        remoteJid: '5511999999999@s.whatsapp.net',
        fromMe: false,
        id: 'TEST_CORRIGIDO_' + Date.now()
      },
      message: {
        conversation: 'üß™ Teste produ√ß√£o corrigido: ' + new Date().toLocaleString()
      },
      messageTimestamp: Date.now(),
      pushName: 'Cliente Teste Corrigido'
    }
  };

  try {
    const response = await fetch('https://bkcrm.devsible.com.br/webhook/evolution', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const data = await response.json();
    
    console.log('üìä Resultado:');
    console.log('   Status:', response.status);
    console.log('   Processado:', data.processed);
    console.log('   Ticket ID:', data.ticketId);
    console.log('   WebSocket:', data.websocket);
    console.log('   Mensagem:', data.message);
    
    if (data.processed === true) {
      console.log('\\n‚úÖ SUCESSO: Produ√ß√£o corrigida!');
      console.log('üéâ Agora as mensagens devem aparecer instantaneamente!');
    } else {
      console.log('\\n‚ùå Ainda n√£o funcionando');
      console.log('üí° Verificar se o deploy foi aplicado');
    }
    
  } catch (error) {
    console.log('‚ùå Erro:', error.message);
  }
}

testarProducaoCorrigido();
`;

fs.writeFileSync('teste-producao-corrigido.js', testScript);
console.log('‚úÖ Script de teste criado: teste-producao-corrigido.js');

// 5. Instru√ß√µes de deploy
console.log('\n5. üìã INSTRU√á√ïES DE DEPLOY:');
console.log('============================');
console.log('');
console.log('üîß PARA APLICAR EM PRODU√á√ÉO:');
console.log('');
console.log('1. Acesse o EasyPanel VPS');
console.log('2. V√° para o projeto bkcrm');
console.log('3. Encontre o container do webhook');
console.log('4. Fa√ßa upload do arquivo:');
console.log(`   ${productionFile}`);
console.log('');
console.log('5. Reinicie o container do webhook');
console.log('6. Execute o teste:');
console.log('   node teste-producao-corrigido.js');
console.log('');
console.log('üéØ RESULTADO ESPERADO:');
console.log('- processed: true');
console.log('- Ticket ID gerado');
console.log('- WebSocket: true');
console.log('- Mensagens aparecem instantaneamente');
console.log('');
console.log('‚úÖ DEPLOY PREPARADO!');
console.log('Aguarde o deploy em produ√ß√£o para testar.'); 