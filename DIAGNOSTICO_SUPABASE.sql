-- ================================================================
-- DIAGN√ìSTICO COMPLETO DO SUPABASE
-- ================================================================
-- Execute este script primeiro para identificar todos os problemas

-- ================================================================
-- VERIFICAR EXIST√äNCIA DAS TABELAS
-- ================================================================

DO $$
DECLARE
    table_exists BOOLEAN;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç DIAGN√ìSTICO SUPABASE - VERIFICANDO ESTRUTURA';
    RAISE NOTICE '================================================';
    RAISE NOTICE '';
    
    -- Verificar tabela profiles
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'profiles'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ Tabela profiles: EXISTE';
    ELSE
        RAISE NOTICE '‚ùå Tabela profiles: N√ÉO EXISTE';
    END IF;
    
    -- Verificar tabela tickets
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'tickets'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ Tabela tickets: EXISTE';
    ELSE
        RAISE NOTICE '‚ùå Tabela tickets: N√ÉO EXISTE';
    END IF;
    
    -- Verificar tabela messages
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'messages'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ Tabela messages: EXISTE';
    ELSE
        RAISE NOTICE '‚ùå Tabela messages: N√ÉO EXISTE';
    END IF;
    
END $$;

-- ================================================================
-- VERIFICAR POL√çTICAS RLS
-- ================================================================

DO $$
DECLARE
    policies_record RECORD;
    policy_count INTEGER;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîí VERIFICANDO POL√çTICAS RLS';
    RAISE NOTICE '============================';
    
    -- Contar pol√≠ticas por tabela
    FOR policies_record IN
        SELECT 
            tablename,
            COUNT(*) as policy_count
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename IN ('profiles', 'tickets', 'messages')
        GROUP BY tablename
        ORDER BY tablename
    LOOP
        RAISE NOTICE 'üìã Tabela %: % pol√≠tica(s)', policies_record.tablename, policies_record.policy_count;
    END LOOP;
    
    -- Listar pol√≠ticas problem√°ticas (podem causar recurs√£o)
    RAISE NOTICE '';
    RAISE NOTICE '‚ö†Ô∏è POL√çTICAS QUE PODEM CAUSAR RECURS√ÉO:';
    
    FOR policies_record IN
        SELECT tablename, policyname, cmd
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'profiles'
        AND (
            policyname ILIKE '%recursive%' OR
            policyname ILIKE '%Users can%' OR
            policyname ILIKE '%Allow%'
        )
    LOOP
        RAISE NOTICE '  üö® %: % (%)', policies_record.tablename, policies_record.policyname, policies_record.cmd;
    END LOOP;
    
END $$;

-- ================================================================
-- VERIFICAR USU√ÅRIOS E PERFIS
-- ================================================================

DO $$
DECLARE
    auth_users_count INTEGER;
    profiles_count INTEGER;
    orphan_count INTEGER;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üë• VERIFICANDO USU√ÅRIOS E PERFIS';
    RAISE NOTICE '================================';
    
    -- Contar usu√°rios na auth.users
    SELECT COUNT(*) INTO auth_users_count FROM auth.users;
    RAISE NOTICE 'üìä Usu√°rios em auth.users: %', auth_users_count;
    
    -- Contar perfis (se tabela existe)
    BEGIN
        SELECT COUNT(*) INTO profiles_count FROM profiles;
        RAISE NOTICE 'üìä Perfis em profiles: %', profiles_count;
        
        -- Verificar usu√°rios √≥rf√£os (sem perfil)
        SELECT COUNT(*) INTO orphan_count 
        FROM auth.users u 
        LEFT JOIN profiles p ON u.id = p.id 
        WHERE p.id IS NULL;
        
        IF orphan_count > 0 THEN
            RAISE NOTICE '‚ö†Ô∏è Usu√°rios sem perfil: %', orphan_count;
        ELSE
            RAISE NOTICE '‚úÖ Todos os usu√°rios t√™m perfil';
        END IF;
        
    EXCEPTION
        WHEN undefined_table THEN
            RAISE NOTICE '‚ùå Tabela profiles n√£o existe - n√£o √© poss√≠vel verificar';
    END;
    
END $$;

-- ================================================================
-- VERIFICAR TRIGGERS
-- ================================================================

DO $$
DECLARE
    trigger_exists BOOLEAN;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚öôÔ∏è VERIFICANDO TRIGGERS';
    RAISE NOTICE '======================';
    
    -- Verificar trigger de cria√ß√£o de perfil
    SELECT EXISTS (
        SELECT FROM pg_trigger 
        WHERE tgname = 'on_auth_user_created'
    ) INTO trigger_exists;
    
    IF trigger_exists THEN
        RAISE NOTICE '‚úÖ Trigger on_auth_user_created: EXISTE';
    ELSE
        RAISE NOTICE '‚ùå Trigger on_auth_user_created: N√ÉO EXISTE';
    END IF;
    
END $$;

-- ================================================================
-- VERIFICAR ERROS ESPEC√çFICOS
-- ================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç TESTANDO ACESSOS B√ÅSICOS';
    RAISE NOTICE '===========================';
    
    -- Testar acesso b√°sico √† profiles
    BEGIN
        PERFORM COUNT(*) FROM profiles LIMIT 1;
        RAISE NOTICE '‚úÖ Acesso √† tabela profiles: OK';
    EXCEPTION
        WHEN insufficient_privilege THEN
            RAISE NOTICE '‚ùå Acesso √† profiles: ERRO DE PERMISS√ÉO (RLS)';
        WHEN undefined_table THEN
            RAISE NOTICE '‚ùå Acesso √† profiles: TABELA N√ÉO EXISTE';
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Acesso √† profiles: ERRO - %', SQLERRM;
    END;
    
    -- Testar acesso b√°sico √† tickets
    BEGIN
        PERFORM COUNT(*) FROM tickets LIMIT 1;
        RAISE NOTICE '‚úÖ Acesso √† tabela tickets: OK';
    EXCEPTION
        WHEN insufficient_privilege THEN
            RAISE NOTICE '‚ùå Acesso √† tickets: ERRO DE PERMISS√ÉO (RLS)';
        WHEN undefined_table THEN
            RAISE NOTICE '‚ùå Acesso √† tickets: TABELA N√ÉO EXISTE';
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Acesso √† tickets: ERRO - %', SQLERRM;
    END;
    
END $$;

-- ================================================================
-- RESUMO DO DIAGN√ìSTICO
-- ================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üìã RESUMO E RECOMENDA√á√ïES';
    RAISE NOTICE '==========================';
    RAISE NOTICE '';
    RAISE NOTICE '1. Se houver tabelas faltando: Execute CORRECAO_URGENTE_RLS_SUPABASE.sql';
    RAISE NOTICE '2. Se houver erro de recurs√£o RLS: Execute CORRECAO_URGENTE_RLS_SUPABASE.sql';
    RAISE NOTICE '3. Se houver usu√°rios √≥rf√£os: Execute CORRECAO_URGENTE_RLS_SUPABASE.sql';
    RAISE NOTICE '4. Se houver trigger faltando: Execute CORRECAO_URGENTE_RLS_SUPABASE.sql';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ O script de corre√ß√£o resolve todos os problemas identificados!';
    RAISE NOTICE '';
END $$; 