import { TicketRoutingService, type IncomingMessage } from './ticketRoutingService';

/**
 * Simula o recebimento de webhooks da Evolution API para desenvolvimento
 * Em produ√ß√£o, isso seria substitu√≠do por um endpoint real
 */
export class WebhookSimulator {
  
  /**
   * Simula um webhook MESSAGES_UPSERT da Evolution API
   */
  static async simulateMessageWebhook(payload: {
    senderPhone: string;
    senderName: string;
    content: string;
    instanceName: string;
    messageType?: 'text' | 'image' | 'video' | 'audio' | 'document';
    mediaUrl?: string;
    mediaCaption?: string;
  }) {
    try {
      console.log('üì® [SIMULATOR] Webhook Evolution simulado:', payload);
      
      // Converter para formato interno
      const incomingMessage: IncomingMessage = {
        senderPhone: payload.senderPhone,
        senderName: payload.senderName,
        content: payload.content,
        instanceName: payload.instanceName,
        messageId: `sim_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        messageType: payload.messageType || 'text',
        mediaUrl: payload.mediaUrl,
        mediaCaption: payload.mediaCaption,
        timestamp: new Date().toISOString()
      };
      
      // Processar atrav√©s do sistema de roteamento
      const result = await TicketRoutingService.routeMessage(incomingMessage);
      
      console.log('‚úÖ [SIMULATOR] Resultado do processamento:', result);
      
      // Simular notifica√ß√£o no sistema
      if (result.action === 'created') {
        this.showNotification(`üé´ Novo ticket criado: #${result.ticketId}`, payload.content);
      } else if (result.action === 'updated') {
        this.showNotification(`üí¨ Nova mensagem no ticket #${result.ticketId}`, payload.content);
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå [SIMULATOR] Erro ao processar webhook:', error);
      throw error;
    }
  }
  
  /**
   * Inicia simula√ß√£o de conversa em tempo real
   */
  static startConversationSimulation(phone: string, instanceName: string = 'financeiro-encontra') {
    const messages = [
      { delay: 1000, content: 'Ol√°! Preciso de ajuda com meu pedido.', sender: 'Cliente' },
      { delay: 5000, content: 'Fiz um pedido ontem mas n√£o recebi confirma√ß√£o.', sender: 'Cliente' },
      { delay: 10000, content: 'O n√∫mero do pedido √© #12345', sender: 'Cliente' },
      { delay: 15000, content: 'Voc√™s podem verificar para mim?', sender: 'Cliente' },
    ];
    
    console.log(`üé≠ [SIMULATOR] Iniciando simula√ß√£o de conversa para ${phone}`);
    
    messages.forEach((msg, index) => {
      setTimeout(async () => {
        await this.simulateMessageWebhook({
          senderPhone: phone,
          senderName: `${msg.sender} ${phone.slice(-4)}`,
          content: msg.content,
          instanceName: instanceName
        });
      }, msg.delay);
    });
    
    console.log(`‚è±Ô∏è [SIMULATOR] ${messages.length} mensagens agendadas em ${messages[messages.length - 1].delay / 1000} segundos`);
  }
  
  /**
   * Simula diferentes cen√°rios de teste
   */
  static async runTestScenarios() {
    console.log('üé≠ [SIMULATOR] Executando cen√°rios de teste...');
    
    const scenarios = [
      {
        name: 'Cliente Novo',
        phone: '5511999887766',
        messages: [
          'Ol√°! Gostaria de conhecer seus servi√ßos.',
          'Voc√™s atendem na regi√£o da Vila Madalena?'
        ]
      },
      {
        name: 'Cliente Retornando',
        phone: '5511999887755',
        messages: [
          'Oi, sou cliente e preciso de suporte.',
          'Meu √∫ltimo pedido teve problema na entrega.'
        ]
      },
      {
        name: 'D√∫vida T√©cnica',
        phone: '5511999887744',
        messages: [
          'Tenho uma d√∫vida t√©cnica sobre o produto.',
          'Como fa√ßo para configurar a integra√ß√£o?'
        ]
      }
    ];
    
    for (const scenario of scenarios) {
      console.log(`\nüéØ [SIMULATOR] Cen√°rio: ${scenario.name} (${scenario.phone})`);
      
      for (let i = 0; i < scenario.messages.length; i++) {
        const message = scenario.messages[i];
        
        console.log(`  üì± Mensagem ${i + 1}: ${message}`);
        
        await this.simulateMessageWebhook({
          senderPhone: scenario.phone,
          senderName: scenario.name,
          content: message,
          instanceName: 'financeiro-encontra'
        });
        
        // Aguardar um pouco entre mensagens
        if (i < scenario.messages.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      // Aguardar entre cen√°rios
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    console.log('‚úÖ [SIMULATOR] Todos os cen√°rios executados!');
  }
  
  /**
   * Mostra notifica√ß√£o no sistema (toast ou similar)
   */
  private static showNotification(title: string, content: string) {
    // Tentar usar o sistema de toast se dispon√≠vel
    if (typeof window !== 'undefined' && (window as any).showToast) {
      (window as any).showToast(title, content);
    } else {
      console.log(`üîî [NOTIFICATION] ${title}: ${content.substring(0, 50)}...`);
    }
  }
  
  /**
   * Limpa dados de simula√ß√£o
   */
  static async clearSimulationData() {
    try {
      const { TicketRoutingService } = await import('./ticketRoutingService');
      
      console.log('üßπ [SIMULATOR] Limpando dados de simula√ß√£o...');
      
      const autoTickets = await TicketRoutingService.getAutoCreatedTickets(100);
      const simulationTickets = autoTickets.filter(ticket => 
        ticket.metadata?.evolution_message_id?.startsWith('sim_')
      );
      
      console.log(`üìã [SIMULATOR] Encontrados ${simulationTickets.length} tickets de simula√ß√£o`);
      
      if (simulationTickets.length === 0) {
        console.log('‚úÖ [SIMULATOR] Nenhum dado de simula√ß√£o para limpar');
        return { success: true, cleaned: 0 };
      }
      
      const { supabase } = await import('@/lib/supabase');
      
      // Remover mensagens de simula√ß√£o primeiro
      const ticketIds = simulationTickets.map(t => t.id);
      await supabase
        .from('messages')
        .delete()
        .in('ticket_id', ticketIds);
      
      // Remover tickets de simula√ß√£o
      const { error } = await supabase
        .from('tickets')
        .delete()
        .in('id', ticketIds);
      
      if (error) {
        console.error('‚ùå [SIMULATOR] Erro ao limpar dados:', error);
        return { success: false, error };
      }
      
      console.log(`‚úÖ [SIMULATOR] ${simulationTickets.length} tickets de simula√ß√£o removidos`);
      return { success: true, cleaned: simulationTickets.length };
      
    } catch (error) {
      console.error('‚ùå [SIMULATOR] Erro na limpeza:', error);
      return { success: false, error };
    }
  }
}

// Expor para uso em dev-helpers
(window as any).WebhookSimulator = WebhookSimulator; 