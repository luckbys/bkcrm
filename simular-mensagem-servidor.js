// üöÄ SIMULAR MENSAGEM DO SERVIDOR - Teste direto servidor ‚Üí frontend\n\nconst io = require('socket.io-client');\n\nconsole.log('üéØ === SIMULANDO MENSAGEM REAL DO SERVIDOR ===');\n\nconst TICKET_ID = '788a5f10-a693-4cfa-8410-ed5cd082e555';\nconst SERVER_URL = 'http://localhost:4000';\n\nasync function simularMensagemReal() {\n    console.log('\\nüîå 1. CONECTANDO COMO CLIENTE...');\n    \n    const socket = io(SERVER_URL, {\n        transports: ['websocket'],\n        timeout: 5000\n    });\n    \n    return new Promise((resolve, reject) => {\n        socket.on('connect', () => {\n            console.log('‚úÖ Conectado ao servidor:', socket.id);\n            \n            // 1. Entrar no ticket\n            console.log(`üîó Entrando no ticket ${TICKET_ID}...`);\n            socket.emit('join-ticket', {\n                ticketId: TICKET_ID,\n                userId: 'test-user'\n            });\n        });\n        \n        socket.on('joined-ticket', (data) => {\n            console.log('‚úÖ Entrou no ticket:', data);\n            \n            // 2. Aguardar um pouco e enviar mensagem\n            setTimeout(() => {\n                console.log('\\nüì® 2. ENVIANDO MENSAGEM COMO CLIENTE...');\n                \n                const mensagem = {\n                    ticketId: TICKET_ID,\n                    content: `üî• TESTE SERVIDOR REAL - ${new Date().toLocaleTimeString()} - Esta mensagem deve aparecer no frontend!`,\n                    isInternal: false,\n                    userId: 'test-user',\n                    senderName: 'Cliente Teste Real'\n                };\n                \n                console.log('üì§ Enviando via send-message:', mensagem);\n                socket.emit('send-message', mensagem);\n                \n            }, 1000);\n        });\n        \n        socket.on('new-message', (data) => {\n            console.log('\\nüì• 3. MENSAGEM RECEBIDA DO SERVIDOR:');\n            console.log('üìä Dados:', {\n                id: data.id,\n                ticket_id: data.ticket_id,\n                content: data.content,\n                sender_name: data.sender_name,\n                is_internal: data.is_internal,\n                created_at: data.created_at\n            });\n            \n            console.log('\\n‚úÖ TESTE CONCLU√çDO! Mensagem processada pelo servidor.');\n            console.log('\\nüí° Agora verifique se apareceu no frontend:');\n            console.log('   1. Abra http://localhost:3000');\n            console.log('   2. Abra o chat do ticket');\n            console.log('   3. Veja se a mensagem apareceu');\n            \n            setTimeout(() => {\n                socket.disconnect();\n                resolve(true);\n            }, 2000);\n        });\n        \n        socket.on('error', (error) => {\n            console.error('‚ùå Erro:', error);\n            reject(error);\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('‚ùå Erro de conex√£o:', error);\n            reject(error);\n        });\n        \n        // Timeout de 15 segundos\n        setTimeout(() => {\n            console.log('‚è∞ Timeout - encerrando teste');\n            socket.disconnect();\n            resolve(false);\n        }, 15000);\n    });\n}\n\n// Executar teste\nsimularMensagemReal()\n    .then(result => {\n        if (result) {\n            console.log('\\nüéâ TESTE PASSOU! Mensagem enviada com sucesso.');\n        } else {\n            console.log('\\nüí• TESTE FALHOU! Verifique os logs acima.');\n        }\n        process.exit(0);\n    })\n    .catch(error => {\n        console.error('\\n‚ùå ERRO NO TESTE:', error);\n        process.exit(1);\n    }); 