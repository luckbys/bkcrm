-- =====================================================
-- DIAGN√ìSTICO R√ÅPIDO - WEBHOOK EVOLUTION API
-- =====================================================
-- 
-- Execute este script AP√ìS aplicar todas as corre√ß√µes
-- para verificar se tudo est√° funcionando corretamente
--
-- Data: 2025-01-17
-- =====================================================

SELECT 'üîç DIAGN√ìSTICO WEBHOOK EVOLUTION API' as titulo;

-- 1. VERIFICAR RLS NOTIFICATIONS
SELECT 
    '1Ô∏è‚É£ RLS NOTIFICATIONS' as check_item,
    CASE 
        WHEN rowsecurity THEN '‚ùå RLS ATIVO (pode causar erro)'
        ELSE '‚úÖ RLS DESABILITADO (OK para webhook)'
    END as status
FROM pg_tables 
WHERE tablename = 'notifications' 
AND schemaname = 'public';

-- 2. VERIFICAR ENUM TICKET_STATUS
SELECT 
    '2Ô∏è‚É£ ENUM TICKET_STATUS' as check_item,
    CASE 
        WHEN COUNT(*) >= 4 THEN '‚úÖ Valores em portugu√™s dispon√≠veis (' || COUNT(*)::TEXT || ' valores)'
        ELSE '‚ùå Faltam valores em portugu√™s (' || COUNT(*)::TEXT || ' valores)'
    END as status
FROM pg_enum 
WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'ticket_status');

-- 3. VERIFICAR FOREIGN KEY TICKETS ‚Üí PROFILES
SELECT 
    '3Ô∏è‚É£ FOREIGN KEY' as check_item,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ Constraint correta (tickets ‚Üí profiles)'
        ELSE '‚ùå Constraint n√£o encontrada'
    END as status
FROM pg_constraint 
WHERE conrelid = 'tickets'::regclass
AND contype = 'f'
AND pg_get_constraintdef(oid) LIKE '%profiles%';

-- 4. VERIFICAR CLIENTES NA TABELA PROFILES
SELECT 
    '4Ô∏è‚É£ CLIENTES PROFILES' as check_item,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ ' || COUNT(*)::TEXT || ' clientes cadastrados'
        ELSE '‚ö†Ô∏è Nenhum cliente cadastrado'
    END as status
FROM profiles 
WHERE role = 'customer';

-- 5. VERIFICAR FUN√á√ïES RPC WEBHOOK
SELECT 
    '5Ô∏è‚É£ FUN√á√ïES RPC' as check_item,
    CASE 
        WHEN COUNT(*) >= 3 THEN '‚úÖ Fun√ß√µes webhook criadas (' || COUNT(*)::TEXT || ' fun√ß√µes)'
        ELSE '‚ùå Faltam fun√ß√µes RPC (' || COUNT(*)::TEXT || ' encontradas)'
    END as status
FROM information_schema.routines 
WHERE routine_name LIKE '%_webhook' 
AND routine_schema = 'public';

-- 6. VERIFICAR TICKETS RECENTES (√öLTIMAS 24H)
SELECT 
    '6Ô∏è‚É£ TICKETS RECENTES' as check_item,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ ' || COUNT(*)::TEXT || ' tickets criados (24h)'
        ELSE '‚ö†Ô∏è Nenhum ticket nas √∫ltimas 24h'
    END as status
FROM tickets 
WHERE created_at > NOW() - INTERVAL '24 hours'
AND channel = 'whatsapp';

-- 7. VERIFICAR MENSAGENS RECENTES (√öLTIMAS 24H)
SELECT 
    '7Ô∏è‚É£ MENSAGENS RECENTES' as check_item,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ ' || COUNT(*)::TEXT || ' mensagens salvas (24h)'
        ELSE '‚ö†Ô∏è Nenhuma mensagem nas √∫ltimas 24h'
    END as status
FROM messages 
WHERE created_at > NOW() - INTERVAL '24 hours';

-- 8. RESUMO GERAL
SELECT 
    'üìä RESUMO GERAL' as titulo,
    '===================' as separador;

-- Contar problemas
WITH diagnostics AS (
    SELECT 
        CASE WHEN rowsecurity THEN 1 ELSE 0 END as rls_problem
    FROM pg_tables WHERE tablename = 'notifications'
    
    UNION ALL
    
    SELECT 
        CASE WHEN COUNT(*) < 4 THEN 1 ELSE 0 END as enum_problem
    FROM pg_enum WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'ticket_status')
    
    UNION ALL
    
    SELECT 
        CASE WHEN COUNT(*) = 0 THEN 1 ELSE 0 END as fkey_problem
    FROM pg_constraint 
    WHERE conrelid = 'tickets'::regclass AND contype = 'f' AND pg_get_constraintdef(oid) LIKE '%profiles%'
    
    UNION ALL
    
    SELECT 
        CASE WHEN COUNT(*) < 3 THEN 1 ELSE 0 END as rpc_problem
    FROM information_schema.routines 
    WHERE routine_name LIKE '%_webhook' AND routine_schema = 'public'
)
SELECT 
    'STATUS FINAL' as item,
    CASE 
        WHEN SUM(rls_problem + enum_problem + fkey_problem + rpc_problem) = 0 
        THEN 'üéâ WEBHOOK 100% FUNCIONAL - PRONTO PARA USO!'
        ELSE '‚ö†Ô∏è ' || SUM(rls_problem + enum_problem + fkey_problem + rpc_problem)::TEXT || ' problemas encontrados - verificar logs acima'
    END as resultado
FROM diagnostics;

-- 9. PR√ìXIMOS PASSOS
SELECT 
    'üöÄ PR√ìXIMOS PASSOS' as titulo,
    CASE 
        WHEN (
            SELECT COUNT(*) 
            FROM pg_tables 
            WHERE tablename = 'notifications' 
            AND rowsecurity = false
        ) > 0 
        AND (
            SELECT COUNT(*) 
            FROM pg_enum 
            WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'ticket_status')
        ) >= 4
        AND (
            SELECT COUNT(*) 
            FROM pg_constraint 
            WHERE conrelid = 'tickets'::regclass AND contype = 'f' AND pg_get_constraintdef(oid) LIKE '%profiles%'
        ) > 0
        THEN 
            '1. Reiniciar webhook: node webhook-evolution-complete.js
2. Enviar mensagem WhatsApp de teste
3. Verificar logs sem erros ‚ùå
4. Confirmar tickets aparecendo no CRM
5. Sistema funcionando! üéâ'
        ELSE 
            'Aplicar corre√ß√µes pendentes:
1. Execute CORRECAO_RLS_NOTIFICATIONS.sql
2. Execute CORRECAO_ENUM_TICKET_STATUS_WEBHOOK.sql  
3. Execute CORRECAO_FOREIGN_KEY_CUSTOMERS_PROFILES.sql
4. Execute este diagn√≥stico novamente'
    END as instrucoes;

-- 10. DETALHES T√âCNICOS (PARA DEBUG)
SELECT 'üîß DETALHES T√âCNICOS' as titulo;

-- Valores do enum dispon√≠veis
SELECT 
    'Enum Values:' as tipo,
    string_agg(enumlabel, ', ' ORDER BY enumsortorder) as valores
FROM pg_enum 
WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'ticket_status');

-- Constraints da tabela tickets
SELECT 
    'Constraints:' as tipo,
    string_agg(conname, ', ') as constraints
FROM pg_constraint 
WHERE conrelid = 'tickets'::regclass AND contype = 'f';

-- Fun√ß√µes RPC dispon√≠veis
SELECT 
    'RPC Functions:' as tipo,
    string_agg(routine_name, ', ') as funcoes
FROM information_schema.routines 
WHERE routine_name LIKE '%_webhook' AND routine_schema = 'public'; 