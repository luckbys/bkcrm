# Dockerfile otimizado para EasyPanel
# Resolve problemas de build e conex√£o com Docker daemon

FROM node:18-alpine AS base

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    curl \
    bash \
    dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S bkcrm -u 1001 -G nodejs

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Stage 1: Instalar depend√™ncias
FROM base AS dependencies

# Copiar arquivos de configura√ß√£o de depend√™ncias
COPY --chown=bkcrm:nodejs package*.json ./

# Instalar depend√™ncias com otimiza√ß√µes para build
RUN npm ci --only=production --silent --no-audit --no-fund && \
    npm cache clean --force

# Stage 2: Build da aplica√ß√£o
FROM base AS builder

# Instalar depend√™ncias b√°sicas
RUN apk add --no-cache python3 make g++

# Copiar apenas arquivos necess√°rios para instalar depend√™ncias
COPY package*.json ./

# Instalar depend√™ncias com fallback para npm
RUN npm install || (rm -rf node_modules && npm install)

# Copiar o resto dos arquivos
COPY . .

# Build da aplica√ß√£o
RUN npm run build

# Stage 3: Imagem de produ√ß√£o
FROM nginx:alpine AS production

# Instalar Node.js para o webhook
RUN apk add --no-cache \
    nodejs \
    npm \
    curl \
    bash

# Copiar build da aplica√ß√£o React
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar webhook do WebSocket
COPY --chown=root:root webhook-evolution-websocket.js /app/
COPY --chown=root:root package*.json /app/

# Instalar depend√™ncias do webhook
WORKDIR /app
RUN npm ci --only=production --silent --no-audit --no-fund

# Configurar nginx
COPY --chown=root:root deployment/nginx-easypanel.conf /etc/nginx/nginx.conf

# Criar script de inicializa√ß√£o
RUN cat > /start.sh << 'EOF'
#!/bin/bash
set -e

echo "üöÄ Iniciando BKCRM EasyPanel..."

# Verificar vari√°veis de ambiente
echo "üìã Verificando configura√ß√µes..."
echo "NODE_ENV: $NODE_ENV"
echo "PORT: $PORT"

# Iniciar webhook em background
echo "üîó Iniciando WebSocket webhook..."
cd /app
node webhook-evolution-websocket.js &
WEBHOOK_PID=$!

# Aguardar webhook inicializar
sleep 5

# Verificar se webhook est√° rodando
if curl -f http://localhost:4000/webhook/health > /dev/null 2>&1; then
    echo "‚úÖ WebSocket iniciado com sucesso"
else
    echo "‚ùå Erro ao iniciar WebSocket"
    exit 1
fi

# Iniciar nginx
echo "üåê Iniciando servidor web..."
nginx -g 'daemon off;' &
NGINX_PID=$!

# Monitorar processos
echo "üìä Processos iniciados:"
echo "- WebSocket PID: $WEBHOOK_PID"
echo "- Nginx PID: $NGINX_PID"

# Aguardar qualquer processo finalizar
wait $WEBHOOK_PID $NGINX_PID
EOF

RUN chmod +x /start.sh

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || \
        curl -f http://localhost:4000/webhook/health || exit 1

# Configurar vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=80

# Expor portas
EXPOSE 80 4000

# Usar dumb-init para gerenciamento de processos
ENTRYPOINT ["/start.sh"] 