// 🧪 TESTE DIRETO WEBSOCKET - Simular mensagem do servidor para frontend\n\nconsole.log('🚀 TESTE WEBSOCKET DIRETO INICIADO!');\n\nasync function testarConexaoWebSocket() {\n    console.log('\\n🔌 1. TESTANDO CONEXÃO WEBSOCKET...');\n    \n    // Verificar se o frontend está conectado\n    if (typeof window !== 'undefined' && window.useChatStore) {\n        const store = window.useChatStore.getState();\n        \n        console.log('📊 Estado atual do chat store:', {\n            isConnected: store.isConnected,\n            socket: store.socket ? 'exists' : 'null',\n            totalTickets: Object.keys(store.messages).length,\n            tickets: Object.keys(store.messages)\n        });\n        \n        if (!store.isConnected || !store.socket) {\n            console.log('❌ Frontend não conectado ao WebSocket');\n            console.log('🔄 Tentando conectar...');\n            store.init();\n            \n            // Aguardar conexão\n            await new Promise(resolve => {\n                const checkConnection = setInterval(() => {\n                    const currentState = window.useChatStore.getState();\n                    if (currentState.isConnected) {\n                        clearInterval(checkConnection);\n                        resolve(true);\n                    }\n                }, 500);\n                \n                // Timeout após 10 segundos\n                setTimeout(() => {\n                    clearInterval(checkConnection);\n                    resolve(false);\n                }, 10000);\n            });\n        }\n        \n        const finalState = window.useChatStore.getState();\n        console.log('✅ Estado final:', {\n            isConnected: finalState.isConnected,\n            socketId: finalState.socket?.id\n        });\n        \n        return finalState.isConnected;\n    } else {\n        console.log('❌ useChatStore não encontrado no window');\n        return false;\n    }\n}\n\nasync function simularMensagemDoServidor() {\n    console.log('\\n📨 2. SIMULANDO MENSAGEM DO SERVIDOR...');\n    \n    const ticketId = '788a5f10-a693-4cfa-8410-ed5cd082e555';\n    \n    // Verificar se store está disponível\n    if (typeof window === 'undefined' || !window.useChatStore) {\n        console.log('❌ Store não disponível');\n        return false;\n    }\n    \n    const store = window.useChatStore.getState();\n    \n    if (!store.socket || !store.isConnected) {\n        console.log('❌ Socket não conectado');\n        return false;\n    }\n    \n    // 1. Primeiro, vamos entrar no ticket\n    console.log(`🔗 Entrando no ticket ${ticketId}...`);\n    store.join(ticketId);\n    \n    // Aguardar um pouco\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // 2. Simular mensagem do servidor (formato igual ao servidor real)\n    const novaMensagem = {\n        id: `test-frontend-${Date.now()}`,\n        ticket_id: ticketId,\n        content: `🎯 TESTE FRONTEND DIRETO - ${new Date().toLocaleTimeString()} - Esta mensagem deve aparecer!`,\n        sender_id: null, // Cliente\n        sender_name: 'Cliente Teste Frontend',\n        is_internal: false,\n        created_at: new Date().toISOString(),\n        type: 'text'\n    };\n    \n    console.log('📨 Enviando mensagem simulada:', novaMensagem);\n    \n    // Simular evento 'new-message' vindo do servidor\n    if (store.socket) {\n        // Método 1: Emitir evento diretamente no socket (simular servidor)\n        store.socket.emit('new-message', novaMensagem);\n        \n        // Método 2: Disparar listener manualmente\n        const event = new CustomEvent('websocket-new-message', {\n            detail: novaMensagem\n        });\n        window.dispatchEvent(event);\n        \n        console.log('✅ Mensagem simulada enviada');\n        \n        // Verificar se mensagem apareceu no estado\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        const updatedState = window.useChatStore.getState();\n        const ticketMessages = updatedState.messages[ticketId] || [];\n        \n        console.log('📊 Mensagens no ticket após simulação:', {\n            total: ticketMessages.length,\n            ultima: ticketMessages[ticketMessages.length - 1]?.content?.substring(0, 50)\n        });\n        \n        return ticketMessages.length > 0;\n    }\n    \n    return false;\n}\n\nasync function verificarEventListeners() {\n    console.log('\\n🎧 3. VERIFICANDO EVENT LISTENERS...');\n    \n    if (typeof window === 'undefined' || !window.useChatStore) {\n        console.log('❌ Store não disponível');\n        return;\n    }\n    \n    const store = window.useChatStore.getState();\n    \n    if (!store.socket) {\n        console.log('❌ Socket não disponível');\n        return;\n    }\n    \n    // Verificar listeners do socket\n    const socket = store.socket;\n    const events = ['new-message', 'messages-loaded', 'joined-ticket', 'error'];\n    \n    console.log('📋 Event listeners registrados:');\n    events.forEach(event => {\n        const listenerCount = socket.listenerCount(event);\n        console.log(`  ${event}: ${listenerCount} listeners`);\n        \n        if (listenerCount === 0) {\n            console.warn(`⚠️ Nenhum listener para evento '${event}'`);\n        }\n    });\n    \n    // Verificar eventos personalizados no window\n    console.log('\\n🌐 Eventos window disponíveis:');\n    const windowEvents = [\n        'chat-message-received',\n        'websocket-new-message'\n    ];\n    \n    windowEvents.forEach(event => {\n        console.log(`  ${event}: disponível`);\n    });\n}\n\nasync function testeCompleto() {\n    console.log('🎯 === TESTE COMPLETO WEBSOCKET + FRONTEND ===\\n');\n    \n    try {\n        // 1. Testar conexão\n        const conectado = await testarConexaoWebSocket();\n        if (!conectado) {\n            console.log('❌ Falha na conexão, abortando teste');\n            return;\n        }\n        \n        // 2. Verificar listeners\n        await verificarEventListeners();\n        \n        // 3. Simular mensagem\n        const mensagemRecebida = await simularMensagemDoServidor();\n        \n        // 4. Resultado final\n        console.log('\\n🏁 RESULTADO FINAL:');\n        console.log(`Conexão: ${conectado ? '✅' : '❌'}`);\n        console.log(`Mensagem recebida: ${mensagemRecebida ? '✅' : '❌'}`);\n        \n        if (conectado && mensagemRecebida) {\n            console.log('🎉 TESTE PASSOU! Frontend está recebendo mensagens.');\n        } else {\n            console.log('💥 TESTE FALHOU! Verificar problemas na conexão ou listeners.');\n        }\n        \n    } catch (error) {\n        console.error('❌ Erro no teste:', error);\n    }\n}\n\n// Disponibilizar funções globalmente\nwindow.testarConexaoWebSocket = testarConexaoWebSocket;\nwindow.simularMensagemDoServidor = simularMensagemDoServidor;\nwindow.verificarEventListeners = verificarEventListeners;\nwindow.testeCompleto = testeCompleto;\n\nconsole.log('✅ FUNÇÕES DISPONÍVEIS:');\nconsole.log('📞 testarConexaoWebSocket() - Testar conexão');\nconsole.log('📨 simularMensagemDoServidor() - Simular mensagem');\nconsole.log('🎧 verificarEventListeners() - Verificar listeners');\nconsole.log('🎯 testeCompleto() - Executar teste completo');\nconsole.log('\\n💡 Execute: testeCompleto()'); 