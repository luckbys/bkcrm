
// üîç DEBUG PRODU√á√ÉO - Execute no console do navegador
function debugProducao() {
  console.log('üîç DEBUG PRODU√á√ÉO');
  console.log('=================');
  
  // 1. Verificar se o hook est√° carregado
  console.log('\n1. üì¢ Hook de notifica√ß√µes:');
  if (window.useRealtimeNotifications) {
    console.log('   ‚úÖ Hook dispon√≠vel');
  } else {
    console.log('   ‚ùå Hook n√£o encontrado');
  }
  
  // 2. Verificar WebSocket
  console.log('\n2. üîó WebSocket:');
  if (window.chatStore && window.chatStore.socket) {
    console.log('   ‚úÖ Socket dispon√≠vel');
    console.log('   Status:', window.chatStore.socket.connected ? 'Conectado' : 'Desconectado');
  } else {
    console.log('   ‚ùå Socket n√£o encontrado');
  }
  
  // 3. Verificar componente
  console.log('\n3. üéØ Componente de notifica√ß√µes:');
  const notificationsElement = document.querySelector('[data-testid="notifications-dropdown"]') || 
                              document.querySelector('.notifications-dropdown');
  
  if (notificationsElement) {
    console.log('   ‚úÖ Componente renderizado');
  } else {
    console.log('   ‚ùå Componente n√£o encontrado');
  }
  
  // 4. Testar conex√£o WebSocket
  console.log('\n4. üß™ Testando conex√£o WebSocket...');
  
  if (window.chatStore && window.chatStore.socket) {
    window.chatStore.socket.emit('test-connection', { message: 'Teste produ√ß√£o' });
    console.log('   üì§ Teste enviado');
  }
  
  // 5. Verificar vari√°veis de ambiente
  console.log('\n5. üåê Vari√°veis de ambiente:');
  console.log('   VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL);
  console.log('   VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå');
  
  // 6. Instru√ß√µes
  console.log('\n6. üí° PR√ìXIMOS PASSOS:');
  console.log('   - Se hook n√£o encontrado: verificar import');
  console.log('   - Se socket n√£o conectado: verificar URL');
  console.log('   - Se componente n√£o renderizado: verificar Header.tsx');
  console.log('   - Se vari√°veis n√£o carregadas: verificar .env');
}

// Fun√ß√£o para testar notifica√ß√£o manual
function testarNotificacaoManual() {
  console.log('üß™ TESTANDO NOTIFICA√á√ÉO MANUAL');
  
  if (window.chatStore && window.chatStore.socket) {
    const testMessage = {
      id: 'test-' + Date.now(),
      content: 'üß™ Teste notifica√ß√£o manual: ' + new Date().toLocaleString(),
      sender: 'client',
      senderName: 'Cliente Teste',
      timestamp: new Date().toISOString(),
      ticketId: 'test-ticket'
    };
    
    window.chatStore.socket.emit('new-message', testMessage);
    console.log('‚úÖ Teste enviado via WebSocket');
  } else {
    console.log('‚ùå WebSocket n√£o dispon√≠vel');
  }
}

// Fun√ß√£o para verificar logs do webhook
function verificarLogsWebhook() {
  console.log('üìä VERIFICANDO LOGS WEBHOOK');
  
  fetch('https://bkcrm.devsible.com.br/webhook/health')
    .then(response => response.json())
    .then(data => {
      console.log('   Status:', data.status);
      console.log('   Timestamp:', data.timestamp);
      console.log('   WebSocket:', data.websocket);
    })
    .catch(error => {
      console.log('‚ùå Erro:', error.message);
    });
}

// Expor fun√ß√µes globalmente
window.debugProducao = debugProducao;
window.testarNotificacaoManual = testarNotificacaoManual;
window.verificarLogsWebhook = verificarLogsWebhook;

console.log('üîß Fun√ß√µes de debug carregadas:');
console.log('   debugProducao() - Debug completo');
console.log('   testarNotificacaoManual() - Teste manual');
console.log('   verificarLogsWebhook() - Verificar webhook');
