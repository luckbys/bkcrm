/**
 * üîç DIAGN√ìSTICO: TICKETS REAIS N√ÉO CHEGAM NO CRM
 *
 * Execute no console do navegador: diagnosticoTicketsCompleto()
 */
import { supabase } from '@/lib/supabase';
// Fun√ß√£o para ser executada no console
async function diagnosticoTicketsCompleto() {
    console.log('üöÄ DIAGN√ìSTICO COMPLETO: Tickets n√£o chegam no CRM');
    console.log('=' * 60);
    const problemas = [];
    const solucoes = [];
    try {
        // 1. VERIFICAR WEBHOOK
        console.log('\nüì° 1. TESTANDO WEBHOOK...');
        try {
            const webhookResponse = await fetch('https://websocket.bkcrm.devsible.com.br/webhook/health');
            if (webhookResponse.ok) {
                const health = await webhookResponse.json();
                console.log('‚úÖ Webhook funcionando:', health);
            }
            else {
                console.log('‚ùå Webhook n√£o responde');
                problemas.push('Webhook n√£o est√° funcionando');
                solucoes.push('Verificar deploy do webhook no EasyPanel');
            }
        }
        catch (error) {
            console.log('‚ùå Webhook inacess√≠vel:', error);
            problemas.push('Webhook inacess√≠vel');
            solucoes.push('Iniciar webhook local: node webhook-evolution-websocket.js');
        }
        // 2. VERIFICAR BANCO DE DADOS
        console.log('\nüíæ 2. TESTANDO BANCO DE DADOS...');
        const { data: allTickets, error: ticketsError } = await supabase
            .from('tickets')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(20);
        if (ticketsError) {
            console.log('‚ùå Erro no banco:', ticketsError);
            problemas.push('Erro ao acessar tabela tickets');
            solucoes.push('Verificar credenciais Supabase');
        }
        else {
            console.log(`‚úÖ Total de tickets no banco: ${allTickets.length}`);
            // Verificar tickets WhatsApp
            const whatsappTickets = allTickets.filter(ticket => ticket.channel === 'whatsapp' ||
                ticket.metadata?.created_from_whatsapp ||
                ticket.metadata?.evolution_instance_name);
            console.log(`üì± Tickets WhatsApp: ${whatsappTickets.length}`);
            if (whatsappTickets.length > 0) {
                console.log('üìã √öltimos tickets WhatsApp:');
                whatsappTickets.slice(0, 5).forEach(ticket => {
                    console.log(`  üé´ ${ticket.id.substring(0, 8)}... | ${ticket.title} | Dept: ${ticket.department_id || 'NULL'}`);
                });
            }
        }
        // 3. VERIFICAR USU√ÅRIO ATUAL
        console.log('\nüë§ 3. VERIFICANDO USU√ÅRIO ATUAL...');
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            console.log('‚ùå Usu√°rio n√£o autenticado');
            problemas.push('Usu√°rio n√£o logado');
            solucoes.push('Fazer login no sistema');
            return;
        }
        const { data: currentProfile, error: profileError } = await supabase
            .from('profiles')
            .select('id, role, department')
            .eq('id', user.id)
            .single();
        if (profileError) {
            console.log('‚ùå Erro ao buscar perfil:', profileError);
            problemas.push('Perfil do usu√°rio n√£o encontrado');
            solucoes.push('Verificar configura√ß√£o do usu√°rio');
        }
        else {
            console.log('‚úÖ Usu√°rio logado:', {
                id: currentProfile.id.substring(0, 8) + '...',
                role: currentProfile.role,
                department: currentProfile.department
            });
        }
        // 4. VERIFICAR DEPARTAMENTOS
        console.log('\nüè¢ 4. VERIFICANDO DEPARTAMENTOS...');
        const { data: departments, error: deptError } = await supabase
            .from('departments')
            .select('*');
        if (deptError) {
            console.log('‚ùå Erro ao buscar departamentos:', deptError);
            problemas.push('Tabela departments com problema');
            solucoes.push('Executar migra√ß√£o de departamentos no Supabase');
        }
        else {
            console.log(`‚úÖ Departamentos encontrados: ${departments.length}`);
            departments.forEach(dept => {
                console.log(`  üè¢ ${dept.name} (ID: ${dept.id})`);
            });
        }
        // 5. SIMULAR FILTROS
        console.log('\nüéØ 5. SIMULANDO FILTROS DO FRONTEND...');
        if (!currentProfile) {
            console.log('‚ùå N√£o √© poss√≠vel simular filtros sem perfil');
        }
        else {
            const hasGlobalAccess = ['diretor', 'ceo', 'administrador'].includes(currentProfile.department?.toLowerCase() || '');
            console.log('üìä Configura√ß√£o de filtros:', {
                role: currentProfile.role,
                department: currentProfile.department,
                hasGlobalAccess,
                filterRule: currentProfile.role === 'customer' ? 'Apenas pr√≥prios tickets' :
                    hasGlobalAccess ? 'Acesso global - todos tickets' :
                        currentProfile.role === 'agent' ? 'Apenas tickets do departamento' :
                            currentProfile.role === 'admin' ? 'Apenas tickets do departamento' :
                                'Sem filtro espec√≠fico'
            });
            // Simular query com filtros
            let query = supabase.from('tickets').select('id, title, department_id, customer_id');
            if (currentProfile.role === 'customer') {
                query = query.eq('customer_id', user.id);
            }
            else if (!hasGlobalAccess && currentProfile.role === 'agent') {
                // Buscar department_id baseado no nome
                const userDept = departments?.find(d => d.name.toLowerCase() === currentProfile.department?.toLowerCase());
                if (userDept) {
                    query = query.eq('department_id', userDept.id);
                }
            }
            const { data: filteredTickets, error: filterError } = await query.limit(10);
            if (filterError) {
                console.log('‚ùå Erro ao aplicar filtros:', filterError);
                problemas.push('Erro nos filtros de departamento');
                solucoes.push('Revisar configura√ß√£o de relacionamentos');
            }
            else {
                console.log(`‚úÖ Tickets vis√≠veis com filtros: ${filteredTickets.length}`);
                if (filteredTickets.length === 0 && allTickets.length > 0) {
                    console.log('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Tickets existem no banco mas filtros bloqueiam visualiza√ß√£o!');
                    problemas.push('Filtros de departamento bloqueando tickets');
                    solucoes.push('Corrigir department_id dos tickets ou configura√ß√£o do usu√°rio');
                }
            }
        }
        // 6. TESTAR WEBHOOK DIRETO
        console.log('\nüß™ 6. TESTE DIRETO DE WEBHOOK...');
        try {
            const testPayload = {
                event: 'MESSAGES_UPSERT',
                instance: 'teste-diagnostico',
                data: {
                    key: {
                        remoteJid: '5511999887766@s.whatsapp.net',
                        fromMe: false,
                        id: `DIAGNOSTICO_${Date.now()}`
                    },
                    message: {
                        conversation: `[TESTE DIAGN√ìSTICO] ${new Date().toLocaleString()}`
                    },
                    messageTimestamp: Math.floor(Date.now() / 1000),
                    pushName: 'Diagn√≥stico CRM'
                }
            };
            const webhookTest = await fetch('https://websocket.bkcrm.devsible.com.br/webhook/evolution', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(testPayload)
            });
            if (webhookTest.ok) {
                const result = await webhookTest.json();
                console.log('‚úÖ Webhook processou teste:', result);
                if (result.ticketId) {
                    console.log(`üé´ Ticket criado: ${result.ticketId}`);
                    // Verificar se aparece no banco
                    setTimeout(async () => {
                        const { data: createdTicket } = await supabase
                            .from('tickets')
                            .select('*')
                            .eq('id', result.ticketId)
                            .single();
                        if (createdTicket) {
                            console.log('‚úÖ Ticket confirmado no banco:', {
                                id: createdTicket.id.substring(0, 8) + '...',
                                department_id: createdTicket.department_id,
                                channel: createdTicket.channel
                            });
                        }
                        else {
                            console.log('‚ùå Ticket n√£o encontrado no banco ap√≥s cria√ß√£o');
                            problemas.push('Webhook n√£o salva no banco');
                        }
                    }, 2000);
                }
            }
            else {
                console.log('‚ùå Teste de webhook falhou:', webhookTest.status);
                problemas.push('Webhook n√£o processa mensagens de teste');
            }
        }
        catch (error) {
            console.log('‚ùå Erro no teste de webhook:', error);
        }
        // RESUMO FINAL
        console.log('\nüìä RESUMO DO DIAGN√ìSTICO');
        console.log('========================');
        if (problemas.length === 0) {
            console.log('‚úÖ NENHUM PROBLEMA IDENTIFICADO!');
            console.log('üí° Os tickets devem estar chegando normalmente.');
            console.log('   Verifique se est√° na aba correta (Pendentes/Todos)');
        }
        else {
            console.log('‚ùå PROBLEMAS IDENTIFICADOS:');
            problemas.forEach((problema, index) => {
                console.log(`  ${index + 1}. ${problema}`);
            });
            console.log('\nüí° SOLU√á√ïES RECOMENDADAS:');
            solucoes.forEach((solucao, index) => {
                console.log(`  ${index + 1}. ${solucao}`);
            });
        }
        console.log('\nüîß PR√ìXIMOS PASSOS:');
        console.log('1. Execute: removerFiltrosTemporariamente() para ver todos os tickets');
        console.log('2. Execute: criarTicketTeste() para criar um ticket manual');
        console.log('3. Execute: verificarWebhookEvolution() para testar webhook');
    }
    catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
    }
}
// Fun√ß√£o para remover filtros temporariamente
async function removerFiltrosTemporariamente() {
    console.log('üîì Removendo filtros temporariamente...');
    const { data: todosTickets, error } = await supabase
        .from('tickets')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
    if (error) {
        console.log('‚ùå Erro:', error);
    }
    else {
        console.log(`üìä TODOS OS TICKETS (sem filtros): ${todosTickets.length}`);
        const whatsappTickets = todosTickets.filter(t => t.channel === 'whatsapp' ||
            t.metadata?.created_from_whatsapp);
        console.log(`üì± Tickets WhatsApp: ${whatsappTickets.length}`);
        if (whatsappTickets.length > 0) {
            console.log('üìã Tickets WhatsApp encontrados:');
            whatsappTickets.slice(0, 10).forEach(ticket => {
                console.log(`  üé´ ${ticket.title} | Dept: ${ticket.department_id || 'NULL'} | ${ticket.created_at}`);
            });
        }
        else {
            console.log('‚ö†Ô∏è Nenhum ticket WhatsApp encontrado no banco');
        }
    }
}
// Fun√ß√£o para criar ticket de teste
async function criarTicketTeste() {
    console.log('üß™ Criando ticket de teste...');
    const { data: ticket, error } = await supabase
        .from('tickets')
        .insert([{
            title: 'TESTE DIAGN√ìSTICO - ' + new Date().toLocaleString(),
            description: 'Ticket criado pelo diagn√≥stico para teste',
            status: 'open',
            priority: 'medium',
            channel: 'whatsapp',
            metadata: {
                test_diagnostic: true,
                created_from_whatsapp: true,
                client_name: 'Cliente Teste',
                client_phone: '+5511999887766'
            }
        }])
        .select()
        .single();
    if (error) {
        console.log('‚ùå Erro ao criar ticket:', error);
    }
    else {
        console.log('‚úÖ Ticket de teste criado:', ticket.id);
        console.log('üí° Agora verifique se aparece na interface do CRM');
    }
}
// Fun√ß√£o para verificar webhook Evolution
async function verificarWebhookEvolution() {
    console.log('üîó Verificando webhook Evolution API...');
    try {
        const response = await fetch('https://press-evolution-api.jhkbgs.easypanel.host/instance/fetchInstances', {
            headers: {
                'apikey': '429683C4C977415CAAFCCE10F7D57E11'
            }
        });
        if (response.ok) {
            const instances = await response.json();
            console.log(`‚úÖ Evolution API funcionando. Inst√¢ncias: ${instances.length}`);
            instances.forEach((instance) => {
                console.log(`üì± ${instance.name} | Status: ${instance.connectionStatus}`);
            });
        }
        else {
            console.log('‚ùå Evolution API n√£o responde');
        }
    }
    catch (error) {
        console.log('‚ùå Erro ao conectar Evolution API:', error);
    }
}
window.diagnosticoTicketsCompleto = diagnosticoTicketsCompleto;
window.removerFiltrosTemporariamente = removerFiltrosTemporariamente;
window.criarTicketTeste = criarTicketTeste;
window.verificarWebhookEvolution = verificarWebhookEvolution;
export { diagnosticoTicketsCompleto, removerFiltrosTemporariamente, criarTicketTeste, verificarWebhookEvolution };
