import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useCallback } from 'react';
import { UnifiedChatModal } from './UnifiedChatModal';
import { useChatStore } from '../../stores/chatStore';
// üé® Wrapper que adapta o UnifiedChatModal para funcionar com a interface do SimpleChatModal
const UnifiedChatModalWrapper = ({ ticket, isOpen, onOpenChange }) => {
    const { init, isConnected } = useChatStore();
    // Extrair informa√ß√µes do ticket
    const ticketId = ticket?.originalId || ticket?.id ? String(ticket.originalId || ticket.id) : '';
    const clientName = ticket?.client || ticket?.title || 'Cliente';
    const clientPhone = ticket?.phone || ticket?.whatsapp_phone;
    // üöÄ Garantir inicializa√ß√£o do WebSocket quando wrapper √© montado
    useEffect(() => {
        if (!isConnected) {
            console.log('üîÑ [WRAPPER] Inicializando WebSocket do wrapper...');
            init();
        }
    }, [init, isConnected]);
    // Fun√ß√£o para fechar o modal
    const handleClose = useCallback(() => {
        console.log('üîí [WRAPPER] Fechando modal para ticket:', ticketId);
        onOpenChange(false);
    }, [onOpenChange, ticketId]);
    // Fun√ß√£o para minimizar (opcional - pode ser implementada depois)
    const handleMinimize = useCallback(() => {
        console.log('üì± [WRAPPER] Minimizando modal para ticket:', ticketId);
        // Por enquanto apenas fecha
        onOpenChange(false);
    }, [onOpenChange, ticketId]);
    // Debug do ticket
    useEffect(() => {
        if (ticket && isOpen) {
            console.log('üé´ [WRAPPER] Ticket aberto:', {
                ticketId,
                clientName,
                clientPhone,
                originalTicket: ticket
            });
        }
    }, [ticket, isOpen, ticketId, clientName, clientPhone]);
    // Se n√£o h√° ticket, n√£o renderiza nada
    if (!ticket || !ticketId) {
        console.log('‚ö†Ô∏è [WRAPPER] Ticket inv√°lido ou ausente:', { ticket, ticketId });
        return null;
    }
    return (_jsx(UnifiedChatModal, { isOpen: isOpen, onClose: handleClose, onMinimize: handleMinimize, ticketId: ticketId, clientName: clientName, clientPhone: clientPhone }));
};
export default UnifiedChatModalWrapper;
