import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Textarea } from '../ui/textarea';
import { Button } from '../ui/button';
import { sectorSchema } from './SectorFormFields.types';
export function SectorFormFieldsComponent({ defaultValues, onSubmit, isLoading, error }) {
    const { register, handleSubmit, formState: { errors }, } = useForm({
        resolver: zodResolver(sectorSchema),
        defaultValues,
    });
    return (_jsxs("form", { onSubmit: handleSubmit(onSubmit), className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "name", children: "Nome do Setor" }), _jsx(Input, { id: "name", ...register('name'), placeholder: "Ex: Suporte T\u00E9cnico", className: "w-full", disabled: isLoading }), errors.name && (_jsx("span", { className: "text-sm text-red-500", children: errors.name.message }))] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "type", children: "Tipo" }), _jsxs(Select, { onValueChange: (value) => register('type').onChange({ target: { value } }), defaultValue: defaultValues?.type || 'default', children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Selecione o tipo" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "default", children: "Padr\u00E3o" }), _jsx(SelectItem, { value: "support", children: "Suporte" }), _jsx(SelectItem, { value: "sales", children: "Vendas" }), _jsx(SelectItem, { value: "marketing", children: "Marketing" }), _jsx(SelectItem, { value: "development", children: "Desenvolvimento" }), _jsx(SelectItem, { value: "finance", children: "Financeiro" }), _jsx(SelectItem, { value: "hr", children: "RH" }), _jsx(SelectItem, { value: "legal", children: "Jur\u00EDdico" }), _jsx(SelectItem, { value: "operations", children: "Opera\u00E7\u00F5es" }), _jsx(SelectItem, { value: "logistics", children: "Log\u00EDstica" })] })] }), errors.type && (_jsx("span", { className: "text-sm text-red-500", children: errors.type.message }))] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "description", children: "Descri\u00E7\u00E3o" }), _jsx(Textarea, { id: "description", ...register('description'), placeholder: "Descreva o prop\u00F3sito deste setor...", className: "w-full min-h-[100px]", disabled: isLoading }), errors.description && (_jsx("span", { className: "text-sm text-red-500", children: errors.description.message }))] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "priority", children: "Prioridade" }), _jsxs(Select, { onValueChange: (value) => register('priority').onChange({ target: { value } }), defaultValue: defaultValues?.priority || 'normal', children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Selecione a prioridade" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "high", children: "Alta" }), _jsx(SelectItem, { value: "medium", children: "M\u00E9dia" }), _jsx(SelectItem, { value: "normal", children: "Normal" }), _jsx(SelectItem, { value: "low", children: "Baixa" })] })] }), errors.priority && (_jsx("span", { className: "text-sm text-red-500", children: errors.priority.message }))] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "icon", children: "\u00CDcone (opcional)" }), _jsx(Input, { id: "icon", ...register('icon'), placeholder: "Ex: UserGroupIcon", className: "w-full", disabled: isLoading })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "color", children: "Cor (opcional)" }), _jsx(Input, { id: "color", type: "color", ...register('color'), className: "w-full h-10", disabled: isLoading })] }), error && (_jsx("div", { className: "text-sm text-red-500 mt-2", children: error })), _jsx("div", { className: "flex justify-end gap-3", children: _jsx(Button, { type: "submit", disabled: isLoading, children: isLoading ? 'Salvando...' : 'Salvar' }) })] }));
}
