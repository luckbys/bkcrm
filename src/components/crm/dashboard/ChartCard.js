import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart3, TrendingUp, TrendingDown } from 'lucide-react';
import { cn } from '@/lib/utils';
export const ChartCard = ({ title, data, type = 'bar', showTrend = false, trendValue, trendDirection = 'up' }) => {
    const maxValue = Math.max(...data.map(item => item.value));
    return (_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-3", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-lg font-semibold flex items-center gap-2", children: [_jsx(BarChart3, { className: "w-5 h-5 text-blue-600" }), title] }), showTrend && (_jsxs("div", { className: cn("flex items-center gap-1 text-sm font-medium", trendDirection === 'up' ? "text-green-600" : "text-red-600"), children: [trendDirection === 'up' ? (_jsx(TrendingUp, { className: "w-4 h-4" })) : (_jsx(TrendingDown, { className: "w-4 h-4" })), trendValue, "%"] }))] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [type === 'bar' && (_jsx("div", { className: "space-y-3", children: data.map((item, index) => (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "font-medium text-gray-700", children: item.label }), _jsx("span", { className: "text-gray-600", children: item.value.toLocaleString() })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-3", children: _jsx("div", { className: cn("h-3 rounded-full transition-all duration-500", item.color), style: { width: `${(item.value / maxValue) * 100}%` } }) })] }, index))) })), type === 'pie' && (_jsxs("div", { className: "space-y-3", children: [_jsx("div", { className: "relative w-32 h-32 mx-auto", children: _jsx("div", { className: "w-32 h-32 rounded-full border-8 border-gray-200 relative overflow-hidden", children: data.map((item, index) => {
                                            const percentage = (item.value / data.reduce((sum, d) => sum + d.value, 0)) * 100;
                                            return (_jsx("div", { className: cn("absolute inset-0 rounded-full", item.color.replace('bg-', 'border-l-')), style: {
                                                    clipPath: `polygon(50% 50%, 50% 0%, ${50 + percentage * 0.5}% 0%)`,
                                                    transform: `rotate(${index * 90}deg)`
                                                } }, index));
                                        }) }) }), _jsx("div", { className: "space-y-2", children: data.map((item, index) => (_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: cn("w-3 h-3 rounded-full", item.color) }), _jsx("span", { className: "font-medium text-gray-700", children: item.label })] }), _jsx("span", { className: "text-gray-600", children: item.value.toLocaleString() })] }, index))) })] })), type === 'line' && (_jsxs("div", { className: "space-y-3", children: [_jsx("div", { className: "h-32 relative", children: _jsxs("svg", { className: "w-full h-full", viewBox: "0 0 300 100", children: [_jsx("polyline", { fill: "none", stroke: "currentColor", strokeWidth: "2", className: "text-blue-600", points: data.map((item, index) => `${(index / (data.length - 1)) * 280 + 10},${90 - (item.value / maxValue) * 70}`).join(' ') }), data.map((item, index) => (_jsx("circle", { cx: (index / (data.length - 1)) * 280 + 10, cy: 90 - (item.value / maxValue) * 70, r: "3", className: "text-blue-600 fill-current" }, index)))] }) }), _jsx("div", { className: "grid grid-cols-2 gap-2 text-xs text-gray-600", children: data.map((item, index) => (_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "font-medium", children: item.value.toLocaleString() }), _jsx("div", { children: item.label })] }, index))) })] }))] }) })] }));
};
