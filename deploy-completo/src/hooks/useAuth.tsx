import React, { useState, useEffect, createContext, useContext } from 'react';
import { User } from '@supabase/supabase-js';
import { supabase } from '../lib/supabase';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
  signUp: (email: string, password: string, name?: string) => Promise<void>;
  resendConfirmation: (email: string) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }): JSX.Element {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Verifica se h√° uma sess√£o ativa
    supabase.auth.getSession().then(({ data: { session } }) => {
      console.log('Sess√£o atual:', session);
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // Escuta mudan√ßas na autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      console.log('Mudan√ßa de estado de autentica√ß√£o:', { event: _event, session });
      setUser(session?.user ?? null);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    console.log('üîê Tentando fazer login com:', { email });
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    console.log('üìã Resposta do login:', { data, error });

    if (error) {
      console.error('‚ùå Erro no login:', error);
      
      // Tratamento espec√≠fico de erros de login
      if (error.message.includes('Email not confirmed')) {
        throw new Error('üìß Email ainda n√£o foi confirmado. Verifique sua caixa de entrada e clique no link de confirma√ß√£o. Voc√™ pode reenviar o email de confirma√ß√£o se necess√°rio.');
      } else if (error.message.includes('Invalid login credentials')) {
        throw new Error('üîí Email ou senha incorretos. Verifique suas credenciais e tente novamente.');
      } else if (error.message.includes('Too many requests')) {
        throw new Error('‚è∞ Muitas tentativas de login. Aguarde alguns minutos antes de tentar novamente.');
      } else if (error.message.includes('User not found')) {
        throw new Error('üë§ Usu√°rio n√£o encontrado. Verifique o email ou registre-se primeiro.');
      } else {
        throw error;
      }
    }

    console.log('‚úÖ Login bem-sucedido:', data.user);
  };

  const signUp = async (email: string, password: string, name?: string) => {
    console.log('üöÄ Tentando registrar com:', { email, name });
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            name: name || email.split('@')[0],
          }
        }
      });

      console.log('üìã Resposta do registro:', { data, error });

      if (error) {
        console.error('‚ùå Erro no registro Supabase:', error);
        
        // Tratamento espec√≠fico de erros
        if (error.message.includes('Database error saving new user')) {
          throw new Error('‚ùå Erro de configura√ß√£o do banco de dados. Execute o script de corre√ß√£o SQL no painel do Supabase: CORRECAO_REGISTRO_PROFILES.sql');
        } else if (error.message.includes('User already registered')) {
          throw new Error('üìß Este email j√° est√° cadastrado. Tente fazer login ou recuperar a senha.');
        } else if (error.message.includes('Invalid email')) {
          throw new Error('üìß Email inv√°lido. Verifique o formato do email.');
        } else if (error.message.includes('Password should be at least')) {
          throw new Error('üîí Senha muito fraca. Use pelo menos 8 caracteres com letras, n√∫meros e s√≠mbolos.');
        } else {
          throw error;
        }
      }

      if (data.user) {
        console.log('‚úÖ Usu√°rio criado com sucesso:', data.user.id);
        
        if (data.user.email_confirmed_at) {
          console.log('‚úÖ Email j√° confirmado automaticamente');
        } else {
          console.log('üìß Email de confirma√ß√£o enviado para:', data.user.email);
          console.log('‚ö†Ô∏è Verifique sua caixa de entrada (incluindo spam) e clique no link de confirma√ß√£o');
        }
        
        // O trigger autom√°tico do banco criar√° o perfil
        console.log('üîÑ Trigger autom√°tico criar√° o perfil...');
      } else {
        throw new Error('üí• Falha na cria√ß√£o do usu√°rio. Tente novamente.');
      }
    } catch (error: any) {
      console.error('üí• Erro completo no registro:', error);
      throw error;
    }
  };

  const resendConfirmation = async (email: string) => {
    console.log('üìß Reenviando email de confirma√ß√£o para:', email);
    
    try {
      const { data, error } = await supabase.auth.resend({
        type: 'signup',
        email: email,
      });

      if (error) {
        console.error('‚ùå Erro ao reenviar confirma√ß√£o:', error);
        
        if (error.message.includes('User already confirmed')) {
          throw new Error('‚úÖ Este email j√° foi confirmado. Tente fazer login.');
        } else if (error.message.includes('Too many requests')) {
          throw new Error('‚è∞ Muitos emails enviados. Aguarde alguns minutos antes de tentar novamente.');
        } else if (error.message.includes('User not found')) {
          throw new Error('üë§ Email n√£o encontrado. Verifique se voc√™ se registrou com este email.');
        } else {
          throw error;
        }
      }

      console.log('‚úÖ Email de confirma√ß√£o reenviado com sucesso');
    } catch (error: any) {
      console.error('üí• Erro ao reenviar confirma√ß√£o:', error);
      throw error;
    }
  };

  const signOut = async () => {
    console.log('üö™ Tentando fazer logout');
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error('‚ùå Erro no logout:', error);
      throw error;
    }

    console.log('‚úÖ Logout bem-sucedido');
  };

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signOut, signUp, resendConfirmation }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
} 