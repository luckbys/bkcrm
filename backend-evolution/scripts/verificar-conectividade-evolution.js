// üîç Verificar Conectividade Evolution API -> Webhook Local
// Este script verifica se a Evolution API consegue acessar nosso webhook

const EVOLUTION_API_URL = 'https://evochat.devsible.com.br/';
const API_KEY = '429683C4C977415CAAFCCE10F7D57E11';
const INSTANCE_NAME = 'atendimento-ao-cliente-suporte';
const WEBHOOK_LOCAL = 'http://localhost:4000/webhook/evolution';

async function makeRequest(endpoint, method = 'GET', data = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'apikey': API_KEY
    }
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(`${EVOLUTION_API_URL}${endpoint}`, options);
    const result = await response.json();
    
    return { success: response.ok, data: result, status: response.status };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function verificarConectividade() {
  console.log('üîç VERIFICANDO CONECTIVIDADE EVOLUTION API');
  console.log('='.repeat(50));
  console.log(`üîó Evolution API: ${EVOLUTION_API_URL}`);
  console.log(`üì° Webhook Local: ${WEBHOOK_LOCAL}`);
  console.log(`üè∑Ô∏è Inst√¢ncia: ${INSTANCE_NAME}`);
  console.log('');

  // 1. Verificar status da inst√¢ncia
  console.log('1Ô∏è‚É£ Verificando status da inst√¢ncia...');
  const statusResult = await makeRequest(`/instance/connectionState/${INSTANCE_NAME}`);
  
  if (statusResult.success) {
    console.log(`‚úÖ Inst√¢ncia: ${statusResult.data.instance?.state || 'unknown'}`);
  } else {
    console.log(`‚ùå Erro ao verificar inst√¢ncia: ${statusResult.error}`);
  }
  console.log('');

  // 2. Verificar webhook atual
  console.log('2Ô∏è‚É£ Verificando webhook atual...');
  const webhookResult = await makeRequest(`/webhook/find/${INSTANCE_NAME}`);
  
  if (webhookResult.success) {
    console.log(`üì° URL atual: ${webhookResult.data.url}`);
    console.log(`‚úÖ Habilitado: ${webhookResult.data.enabled}`);
    console.log(`üîî Eventos: ${webhookResult.data.events?.join(', ')}`);
    
    if (webhookResult.data.url === WEBHOOK_LOCAL) {
      console.log('‚úÖ Webhook configurado para localhost!');
    } else {
      console.log('‚ö†Ô∏è Webhook N√ÉO est√° configurado para localhost!');
      console.log(`üìç Esperado: ${WEBHOOK_LOCAL}`);
      console.log(`üìç Atual: ${webhookResult.data.url}`);
    }
  } else {
    console.log(`‚ùå Erro ao verificar webhook: ${webhookResult.error}`);
  }
  console.log('');

  // 3. Testar se Evolution API consegue acessar nosso webhook
  console.log('3Ô∏è‚É£ Testando conectividade Evolution API -> Webhook Local...');
  
  // A Evolution API est√° em um servidor remoto, ent√£o localhost n√£o vai funcionar!
  console.log('‚ö†Ô∏è PROBLEMA IDENTIFICADO:');
  console.log('üè† localhost:4000 s√≥ funciona na m√°quina local');
  console.log('üåê Evolution API est√° em servidor remoto (EasyPanel)');
  console.log('‚ùå Servidor remoto N√ÉO consegue acessar localhost da sua m√°quina');
  console.log('');

  // 4. Solu√ß√µes poss√≠veis
  console.log('üîß SOLU√á√ïES POSS√çVEIS:');
  console.log('');
  console.log('A) üåê Usar ngrok para expor localhost:');
  console.log('   1. Instalar ngrok: https://ngrok.com/');
  console.log('   2. Executar: ngrok http 4000');
  console.log('   3. Usar URL do ngrok no webhook');
  console.log('');
  console.log('B) üöÄ Deploy do webhook em servidor p√∫blico:');
  console.log('   1. Deploy no EasyPanel (mesmo servidor da Evolution API)');
  console.log('   2. Usar URL p√∫blica do webhook');
  console.log('');
  console.log('C) üß™ Teste local com t√∫nel SSH:');
  console.log('   1. Criar t√∫nel SSH reverso');
  console.log('   2. Expor porta 4000 publicamente');

  // 5. Verificar se h√° alguma forma de teste local
  console.log('');
  console.log('üß™ TESTE ALTERNATIVO:');
  console.log('Para testar localmente, voc√™ pode:');
  console.log('1. Usar o endpoint de teste do webhook: POST /test');
  console.log('2. Simular mensagens diretamente');
  console.log('3. Verificar se o processamento est√° funcionando');
}

// Executar verifica√ß√£o
verificarConectividade().catch(console.error); 