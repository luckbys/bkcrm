/**
 * ATUALIZAR WEBHOOK EXISTENTE
 * 
 * Atualiza a configura√ß√£o de webhook que j√° existe na Evolution API
 */

const axios = require('axios');

// Configura√ß√µes
const EVOLUTION_API_URL = 'https://press-evolution-api.jhkbgs.easypanel.host';
const API_KEY = '429683C4C977415CAAFCCE10F7D57E11';
const WEBHOOK_URL_LOCAL = 'http://localhost:4000/webhook/evolution';
const INSTANCE_NAME = 'atendimento-ao-cliente-sac1';

console.log('üîß ATUALIZANDO WEBHOOK EXISTENTE\n');

async function atualizarWebhookExistente() {
  try {
    console.log('üîß Atualizando configura√ß√£o de webhook existente...');
    console.log(`üì° URL: ${EVOLUTION_API_URL}/webhook/instance`);
    console.log(`üéØ Inst√¢ncia: ${INSTANCE_NAME}`);
    console.log(`üîó Nova URL: ${WEBHOOK_URL_LOCAL}`);
    
    // Configura√ß√£o corrigida
    const webhookConfig = {
      instanceName: INSTANCE_NAME,
      enabled: true,
      url: WEBHOOK_URL_LOCAL,
      webhook_by_events: false,  // IMPORTANTE: desabilitar webhook por eventos
      webhook_base64: false,
      events: [
        'MESSAGES_UPSERT',
        'CONNECTION_UPDATE',
        'QRCODE_UPDATED',
        'SEND_MESSAGE'
      ]
    };
    
    console.log('üìã Nova configura√ß√£o:', JSON.stringify(webhookConfig, null, 2));
    
    const response = await axios.post(
      `${EVOLUTION_API_URL}/webhook/instance`,
      webhookConfig,
      {
        headers: {
          'apikey': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Webhook atualizado com sucesso!');
    console.log('üìä Resposta:', JSON.stringify(response.data, null, 2));
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar webhook:');
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('   Erro:', error.message);
    }
    
    return false;
  }
}

async function verificarWebhookAtualizado() {
  try {
    console.log('üîç Verificando webhook atualizado...');
    
    const response = await axios.get(
      `${EVOLUTION_API_URL}/webhook/find/${INSTANCE_NAME}`,
      {
        headers: {
          'apikey': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Configura√ß√£o atual do webhook:');
    console.log('üìä Dados:', JSON.stringify(response.data, null, 2));
    
    const config = response.data;
    
    // Verificar se a configura√ß√£o est√° correta
    const urlCorreta = config.url === WEBHOOK_URL_LOCAL;
    const eventosDesabilitados = config.webhookByEvents === false;
    const habilitado = config.enabled === true;
    
    console.log('\nüìã VERIFICA√á√ÉO DA CONFIGURA√á√ÉO:');
    console.log(`   ‚úÖ URL correta: ${urlCorreta ? 'SIM' : 'N√ÉO'} (${config.url})`);
    console.log(`   ‚úÖ Webhook por eventos desabilitado: ${eventosDesabilitados ? 'SIM' : 'N√ÉO'}`);
    console.log(`   ‚úÖ Webhook habilitado: ${habilitado ? 'SIM' : 'N√ÉO'}`);
    
    if (urlCorreta && eventosDesabilitados && habilitado) {
      console.log('\nüéâ CONFIGURA√á√ÉO PERFEITA!');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è Configura√ß√£o precisa de ajustes');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar webhook:', error.response?.data || error.message);
    return false;
  }
}

async function testarWebhookLocal() {
  try {
    console.log('üß™ Testando webhook local...');
    
    const response = await axios.get('http://localhost:4000/webhook/health');
    console.log('‚úÖ Webhook local funcionando:', response.data);
    return true;
    
  } catch (error) {
    console.error('‚ùå Webhook local n√£o est√° funcionando:', error.message);
    return false;
  }
}

async function executarAtualizacao() {
  try {
    console.log('üöÄ INICIANDO ATUALIZA√á√ÉO DO WEBHOOK...\n');
    
    // 1. Verificar se webhook local est√° funcionando
    const localOk = await testarWebhookLocal();
    
    if (!localOk) {
      console.log('‚ùå Webhook local n√£o est√° funcionando!');
      console.log('üí° Execute: node webhook-evolution-complete.js');
      return;
    }
    
    console.log('\n' + '='.repeat(50));
    
    // 2. Verificar configura√ß√£o atual
    console.log('üìã VERIFICANDO CONFIGURA√á√ÉO ATUAL...\n');
    await verificarWebhookAtualizado();
    
    console.log('\n' + '='.repeat(50));
    
    // 3. Atualizar webhook
    console.log('üîß ATUALIZANDO WEBHOOK...\n');
    const sucesso = await atualizarWebhookExistente();
    
    if (sucesso) {
      console.log('\n' + '='.repeat(50));
      
      // 4. Verificar configura√ß√£o ap√≥s atualiza√ß√£o
      console.log('üìã VERIFICANDO CONFIGURA√á√ÉO ATUALIZADA...\n');
      const configuracaoOk = await verificarWebhookAtualizado();
      
      if (configuracaoOk) {
        console.log('\nüéâ WEBHOOK ATUALIZADO COM SUCESSO!');
        console.log('\nüí° AGORA TESTE:');
        console.log('   1. Envie uma mensagem WhatsApp para a inst√¢ncia');
        console.log('   2. Verifique os logs do webhook local (deve receber a mensagem)');
        console.log('   3. Confirme se o ticket √© criado automaticamente no CRM');
        console.log('   4. Verifique se n√£o h√° mais erros 404 nos logs da Evolution API');
        
        console.log('\nüì± MONITORAMENTO:');
        console.log('   - Terminal webhook: deve mostrar mensagens recebidas');
        console.log('   - Evolution API: n√£o deve mais mostrar erros 404');
        console.log('   - CRM: deve criar tickets automaticamente');
        
      } else {
        console.log('\n‚ö†Ô∏è Webhook atualizado mas configura√ß√£o ainda n√£o est√° perfeita');
      }
      
    } else {
      console.log('\n‚ùå FALHA NA ATUALIZA√á√ÉO DO WEBHOOK');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO NA ATUALIZA√á√ÉO:', error);
  }
}

// Executar atualiza√ß√£o
executarAtualizacao(); 