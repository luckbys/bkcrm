// =============================================================================
// üîç DIAGN√ìSTICO: Campo nunmsg n√£o est√° sendo preenchido
// =============================================================================

const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');

// Configura√ß√µes
const supabaseUrl = 'https://ajlgjjjvuglwgfnyqqvb.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFqbGdqamp2dWdsd2dmbnlxcXZiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTk0NDk0MywiZXhwIjoyMDUxNTIwOTQzfQ.6CShPE-LsKHhM-K6mhMlV8CZqMGZhNTHJLZI5C4Lf5k';
const supabase = createClient(supabaseUrl, supabaseKey);

const WEBHOOK_URL = 'http://localhost:4000';

async function diagnosticarProblema() {
  console.log('\nüîç === DIAGN√ìSTICO: Por que nunmsg n√£o est√° preenchido? ===\n');

  // 1. VERIFICAR SE CAMPO NUNMSG EXISTE NA TABELA
  console.log('1Ô∏è‚É£ Verificando se campo nunmsg existe na tabela...');
  try {
    const { data, error } = await supabase
      .from('tickets')
      .select('id, nunmsg, channel, metadata')
      .eq('channel', 'whatsapp')
      .limit(1);

    if (error) {
      console.error('‚ùå Erro ao consultar tabela tickets:', error.message);
      if (error.message.includes('column "nunmsg" does not exist')) {
        console.log('üö® PROBLEMA ENCONTRADO: Campo nunmsg n√£o existe na tabela!');
        console.log('üí° SOLU√á√ÉO: Execute o script SQL para adicionar o campo.');
        return false;
      }
    } else {
      console.log('‚úÖ Campo nunmsg existe na tabela tickets');
    }
  } catch (err) {
    console.error('‚ùå Erro ao verificar campo nunmsg:', err.message);
    return false;
  }

  // 2. VERIFICAR TICKETS WHATSAPP RECENTES
  console.log('\n2Ô∏è‚É£ Analisando tickets WhatsApp recentes...');
  try {
    const { data: recentTickets, error } = await supabase
      .from('tickets')
      .select('id, title, nunmsg, channel, metadata, created_at')
      .eq('channel', 'whatsapp')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) {
      console.error('‚ùå Erro ao buscar tickets:', error);
      return false;
    }

    console.log(`üìä Encontrados ${recentTickets.length} tickets WhatsApp recentes:`);
    
    recentTickets.forEach((ticket, index) => {
      console.log(`\n${index + 1}. Ticket ${ticket.id.substring(0, 8)}...`);
      console.log(`   üìÖ Criado: ${ticket.created_at}`);
      console.log(`   üì± nunmsg: ${ticket.nunmsg || 'NULL'}`);
      console.log(`   üè∑Ô∏è Title: ${ticket.title}`);
      console.log(`   üìû Metadata phone: ${ticket.metadata?.client_phone || ticket.metadata?.whatsapp_phone || 'n√£o encontrado'}`);
    });

    const comNunmsg = recentTickets.filter(t => t.nunmsg).length;
    const semNunmsg = recentTickets.filter(t => !t.nunmsg).length;
    
    console.log(`\nüìà Estat√≠sticas: ${comNunmsg} com nunmsg | ${semNunmsg} sem nunmsg`);
    
    if (semNunmsg > 0) {
      console.log('üö® PROBLEMA: Tickets WhatsApp sem nunmsg preenchido!');
    }

  } catch (err) {
    console.error('‚ùå Erro ao analisar tickets:', err.message);
    return false;
  }

  // 3. VERIFICAR STATUS DO WEBHOOK
  console.log('\n3Ô∏è‚É£ Verificando status do webhook...');
  try {
    const response = await fetch(`${WEBHOOK_URL}/webhook/health`);
    
    if (response.ok) {
      const health = await response.json();
      console.log('‚úÖ Webhook est√° rodando:', health);
    } else {
      console.log('‚ùå Webhook n√£o est√° respondendo ou com erro');
      console.log('üí° SOLU√á√ÉO: Verificar se o webhook est√° rodando na porta 4000');
      return false;
    }
  } catch (err) {
    console.error('‚ùå Webhook n√£o est√° acess√≠vel:', err.message);
    console.log('üí° SOLU√á√ÉO: Iniciar o webhook com: node webhook-evolution-complete-corrigido.js');
    return false;
  }

  // 4. TESTAR CRIA√á√ÉO MANUAL DE TICKET COM NUNMSG
  console.log('\n4Ô∏è‚É£ Testando cria√ß√£o manual de ticket com nunmsg...');
  try {
    const testTicket = {
      title: 'Teste nunmsg - ' + Date.now(),
      description: 'Ticket de teste para verificar campo nunmsg',
      status: 'open',
      priority: 'medium',
      channel: 'whatsapp',
      nunmsg: '+5511999887766', // TESTE: Campo nunmsg
      metadata: {
        test_diagnostic: true,
        client_phone: '+5511999887766',
        diagnostic_timestamp: new Date().toISOString()
      }
    };

    console.log('üì§ Criando ticket de teste com nunmsg...');
    
    const { data: createdTicket, error } = await supabase
      .from('tickets')
      .insert([testTicket])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao criar ticket de teste:', error);
      console.log('üö® PROBLEMA: N√£o consegue inserir dados no campo nunmsg!');
      
      if (error.message.includes('column "nunmsg" does not exist')) {
        console.log('üí° SOLU√á√ÉO: Campo nunmsg n√£o existe, execute o script SQL.');
      }
      
      return false;
    } else {
      console.log('‚úÖ Ticket de teste criado com sucesso!');
      console.log(`   üÜî ID: ${createdTicket.id}`);
      console.log(`   üì± nunmsg: ${createdTicket.nunmsg}`);
      
      // Limpar ticket de teste
      await supabase
        .from('tickets')
        .delete()
        .eq('id', createdTicket.id);
      
      console.log('üßπ Ticket de teste removido');
    }
  } catch (err) {
    console.error('‚ùå Erro no teste manual:', err.message);
    return false;
  }

  // 5. VERIFICAR VERS√ÉO DO WEBHOOK
  console.log('\n5Ô∏è‚É£ Verificando se webhook tem c√≥digo atualizado...');
  try {
    // Simular uma mensagem de teste para verificar logs
    const testPayload = {
      event: 'messages.upsert',
      instance: 'teste-diagnostico',
      data: {
        key: {
          remoteJid: '5511999887766@s.whatsapp.net',
          fromMe: false,
          id: 'test_diagnostic_' + Date.now()
        },
        message: {
          conversation: '[TESTE DIAGN√ìSTICO] Verificando se nunmsg √© preenchido'
        },
        messageTimestamp: Math.floor(Date.now() / 1000),
        pushName: 'Teste Diagn√≥stico'
      }
    };

    console.log('üì° Enviando payload de teste para webhook...');
    
    const response = await fetch(`${WEBHOOK_URL}/webhook/evolution`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testPayload)
    });

    const result = await response.json();
    
    if (response.ok && result.processed) {
      console.log('‚úÖ Webhook processou mensagem de teste');
      console.log('üìã Resultado:', result);
      
      // Aguardar e verificar se ticket foi criado com nunmsg
      setTimeout(async () => {
        console.log('\n‚è±Ô∏è Verificando ticket criado pelo teste...');
        
        const { data: testTickets } = await supabase
          .from('tickets')
          .select('id, nunmsg, metadata')
          .contains('metadata', { test_diagnostic: true })
          .order('created_at', { ascending: false })
          .limit(1);

        if (testTickets && testTickets.length > 0) {
          const ticket = testTickets[0];
          console.log(`üé´ Ticket encontrado: ${ticket.id.substring(0, 8)}...`);
          console.log(`üì± nunmsg: ${ticket.nunmsg || 'NULL'}`);
          
          if (ticket.nunmsg) {
            console.log('‚úÖ SUCCESS: Webhook est√° preenchendo nunmsg corretamente!');
          } else {
            console.log('‚ùå PROBLEMA: Webhook criou ticket mas n√£o preencheu nunmsg!');
            console.log('üí° SOLU√á√ÉO: Verificar se webhook tem c√≥digo atualizado.');
          }
          
          // Limpar ticket de teste
          await supabase
            .from('tickets')
            .delete()
            .eq('id', ticket.id);
        } else {
          console.log('‚ùå Ticket de teste n√£o foi encontrado');
        }
      }, 3000);
      
    } else {
      console.log('‚ùå Webhook n√£o processou mensagem de teste:', result);
    }

  } catch (err) {
    console.error('‚ùå Erro ao testar webhook:', err.message);
  }

  return true;
}

// EXECUTAR DIAGN√ìSTICO
diagnosticarProblema()
  .then((success) => {
    if (success) {
      console.log('\nüéØ === RESUMO DO DIAGN√ìSTICO ===');
      console.log('1. Verifique os logs acima para identificar problemas');
      console.log('2. Se campo nunmsg n√£o existe, execute o script SQL');
      console.log('3. Se webhook n√£o est√° rodando, inicie com node webhook-evolution-complete-corrigido.js');
      console.log('4. Se webhook n√£o est√° atualizado, reinicie com c√≥digo novo');
      console.log('5. Aguarde 3 segundos para ver resultado do teste de webhook\n');
    }
  })
  .catch((error) => {
    console.error('‚ùå Erro no diagn√≥stico:', error);
  });

module.exports = { diagnosticarProblema }; 