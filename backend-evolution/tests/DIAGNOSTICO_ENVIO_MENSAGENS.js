// ========================================
// DIAGN√ìSTICO COMPLETO - ENVIO DE MENSAGENS EVOLUTION API
// ========================================

console.log('üîç INICIANDO DIAGN√ìSTICO DE ENVIO DE MENSAGENS...');

// 1. VERIFICAR CONFIGURA√á√ïES EVOLUTION API
async function verificarConfiguracoes() {
  console.log('\nüìã 1. VERIFICANDO CONFIGURA√á√ïES...');
  
  // URLs que devem funcionar
  const URLs = {
    webhookLocal: 'http://localhost:4000',
    webhookProd: 'https://bkcrm.devsible.com.br',
    evolutionAPI: 'https://press-evolution-api.jhkbgs.easypanel.host'
  };
  
  console.log('URLs configuradas:', URLs);
  
  // Detectar ambiente atual
  const isLocal = window.location.hostname === 'localhost';
  const webhookURL = isLocal ? URLs.webhookLocal : URLs.webhookProd;
  
  console.log(`üåê Ambiente detectado: ${isLocal ? 'LOCAL' : 'PRODU√á√ÉO'}`);
  console.log(`üì° Webhook URL ativa: ${webhookURL}`);
  
  return { URLs, webhookURL, isLocal };
}

// 2. TESTAR SA√öDE DO WEBHOOK
async function testarSaudeWebhook(webhookURL) {
  console.log('\nüè• 2. TESTANDO SA√öDE DO WEBHOOK...');
  
  try {
    const response = await fetch(`${webhookURL}/webhook/health`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Webhook est√° funcionando:', data);
      return { success: true, data };
    } else {
      console.error('‚ùå Webhook retornou erro:', response.status, response.statusText);
      return { success: false, error: `HTTP ${response.status}` };
    }
  } catch (error) {
    console.error('‚ùå Erro ao conectar com webhook:', error.message);
    return { success: false, error: error.message };
  }
}

// 3. TESTAR ENDPOINT DE ENVIO
async function testarEndpointEnvio(webhookURL) {
  console.log('\nüì§ 3. TESTANDO ENDPOINT DE ENVIO...');
  
  const payloadTeste = {
    phone: '5511999999999',
    text: 'TESTE DIAGN√ìSTICO - Esta √© uma mensagem de teste para verificar o funcionamento do sistema',
    instance: 'atendimento-ao-cliente-suporte',
    options: {
      delay: 1000,
      presence: 'composing',
      linkPreview: false
    }
  };
  
  console.log('üìã Payload de teste:', payloadTeste);
  
  try {
    console.log(`üéØ Fazendo requisi√ß√£o para: ${webhookURL}/webhook/send-message`);
    
    const response = await fetch(`${webhookURL}/webhook/send-message`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payloadTeste)
    });
    
    console.log(`üìä Status da resposta: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log('üìÑ Resposta bruta:', responseText);
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log('üìã Resposta parsada:', data);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse da resposta:', parseError.message);
      return { success: false, error: 'Resposta n√£o √© JSON v√°lido', rawResponse: responseText };
    }
    
    if (response.ok) {
      console.log('‚úÖ Endpoint de envio respondeu corretamente');
      return { success: true, data, status: response.status };
    } else {
      console.error('‚ùå Endpoint de envio retornou erro');
      return { success: false, data, status: response.status };
    }
    
  } catch (error) {
    console.error('‚ùå Erro na requisi√ß√£o de envio:', error.message);
    return { success: false, error: error.message };
  }
}

// 4. VERIFICAR CONFIGURA√á√ïES EVOLUTION API
async function verificarEvolutionAPI() {
  console.log('\nüîß 4. VERIFICANDO EVOLUTION API...');
  
  // Configura√ß√µes que devem estar definidas
  const configs = {
    EVOLUTION_API_URL: 'https://press-evolution-api.jhkbgs.easypanel.host',
    EVOLUTION_API_KEY: '429683C4C977415CAAFCCE10F7D57E11', // ‚ö†Ô∏è Deve ser configurada corretamente
    EVOLUTION_DEFAULT_INSTANCE: 'atendimento-ao-cliente-suporte'
  };
  
  console.log('üìã Configura√ß√µes Evolution API necess√°rias:');
  Object.entries(configs).forEach(([key, value]) => {
    const isKey = key.includes('KEY');
    const displayValue = isKey ? (value ? '***configurada***' : '‚ùå N√ÉO CONFIGURADA') : value;
    console.log(`   ${key}: ${displayValue}`);
  });
  
  return configs;
}

// 5. TESTAR INST√ÇNCIA EVOLUTION
async function testarInstanciaEvolution(webhookURL) {
  console.log('\nüîå 5. TESTANDO INST√ÇNCIA EVOLUTION...');
  
  try {
    // Testar se a inst√¢ncia est√° conectada via nosso webhook
    const response = await fetch(`${webhookURL}/webhook/check-instance`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        instance: 'atendimento-ao-cliente-suporte'
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Status da inst√¢ncia:', data);
      return { success: true, data };
    } else {
      console.warn('‚ö†Ô∏è Endpoint de verifica√ß√£o de inst√¢ncia n√£o dispon√≠vel');
      return { success: false, error: 'Endpoint n√£o dispon√≠vel' };
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar inst√¢ncia:', error.message);
    return { success: false, error: error.message };
  }
}

// 6. VERIFICAR LOGS DO CONSOLE
function verificarLogsConsole() {
  console.log('\nüìù 6. INSTRU√á√ïES PARA VERIFICAR LOGS...');
  
  console.log('üîç Para diagnosticar problemas, verifique:');
  console.log('   1. Console do navegador (F12) para erros de frontend');
  console.log('   2. Logs do servidor webhook (terminal onde roda o webhook)');
  console.log('   3. Logs da Evolution API');
  
  console.log('\nüö® ERROS COMUNS:');
  console.log('   ‚ùå CORS: Problema de pol√≠tica de origem cruzada');
  console.log('   ‚ùå 404: Endpoint n√£o encontrado ou webhook offline');
  console.log('   ‚ùå 500: Erro interno no servidor webhook');
  console.log('   ‚ùå 401: API Key da Evolution API inv√°lida');
  console.log('   ‚ùå Timeout: Inst√¢ncia Evolution desconectada');
}

// 7. FUN√á√ÉO PRINCIPAL DE DIAGN√ìSTICO
async function executarDiagnostico() {
  console.log('üöÄ DIAGN√ìSTICO INICIADO');
  
  const resultado = {
    configuracoes: null,
    saudeWebhook: null,
    endpointEnvio: null,
    evolutionAPI: null,
    instanciaEvolution: null,
    timestamp: new Date().toISOString()
  };
  
  try {
    // 1. Verificar configura√ß√µes
    resultado.configuracoes = await verificarConfiguracoes();
    const { webhookURL } = resultado.configuracoes;
    
    // 2. Testar sa√∫de do webhook
    resultado.saudeWebhook = await testarSaudeWebhook(webhookURL);
    
    // 3. Testar endpoint de envio
    resultado.endpointEnvio = await testarEndpointEnvio(webhookURL);
    
    // 4. Verificar configura√ß√µes Evolution API
    resultado.evolutionAPI = await verificarEvolutionAPI();
    
    // 5. Testar inst√¢ncia Evolution
    resultado.instanciaEvolution = await testarInstanciaEvolution(webhookURL);
    
    // 6. Verificar logs
    verificarLogsConsole();
    
    // RELAT√ìRIO FINAL
    console.log('\nüìä RELAT√ìRIO FINAL DO DIAGN√ìSTICO:');
    console.log('================================================');
    
    const status = {
      webhook: resultado.saudeWebhook?.success ? '‚úÖ' : '‚ùå',
      envio: resultado.endpointEnvio?.success ? '‚úÖ' : '‚ùå',
      instancia: resultado.instanciaEvolution?.success ? '‚úÖ' : '‚ö†Ô∏è'
    };
    
    console.log(`   Webhook Health: ${status.webhook}`);
    console.log(`   Endpoint Envio: ${status.envio}`);
    console.log(`   Inst√¢ncia Evolution: ${status.instancia}`);
    
    if (!resultado.saudeWebhook?.success) {
      console.log('\nüö® PROBLEMA PRINCIPAL: Webhook n√£o est√° funcionando');
      console.log('   Verifique se o servidor webhook est√° rodando na porta 4000');
      console.log('   Comando: npm run webhook (ou node webhook-evolution-complete.js)');
    } else if (!resultado.endpointEnvio?.success) {
      console.log('\nüö® PROBLEMA PRINCIPAL: Endpoint de envio com erro');
      console.log('   Verifique os logs do servidor webhook para detalhes');
      console.log('   Poss√≠vel problema: API Key Evolution inv√°lida ou inst√¢ncia desconectada');
    } else {
      console.log('\n‚úÖ SISTEMA APARENTEMENTE FUNCIONANDO');
      console.log('   Caso ainda n√£o funcione, verifique:');
      console.log('   - Se a inst√¢ncia WhatsApp est√° conectada');
      console.log('   - Se o n√∫mero de telefone est√° correto');
      console.log('   - Se h√° rate limiting na Evolution API');
    }
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå ERRO GERAL NO DIAGN√ìSTICO:', error);
    return { error: error.message, timestamp: new Date().toISOString() };
  }
}

// ====== FUN√á√ïES AUXILIARES PARA TESTE MANUAL ======

// Fun√ß√£o para testar envio manual
window.testarEnvioManual = async function(telefone, mensagem) {
  console.log('üß™ TESTE MANUAL DE ENVIO');
  
  const configs = await verificarConfiguracoes();
  
  return await testarEndpointEnvio(configs.webhookURL);
};

// Fun√ß√£o para verificar apenas sa√∫de
window.verificarSaude = async function() {
  console.log('üè• VERIFICA√á√ÉO R√ÅPIDA DE SA√öDE');
  
  const configs = await verificarConfiguracoes();
  return await testarSaudeWebhook(configs.webhookURL);
};

// ====== EXECUTAR DIAGN√ìSTICO AUTOMATICAMENTE ======

console.log('‚ö° Executando diagn√≥stico autom√°tico em 2 segundos...');
setTimeout(executarDiagnostico, 2000);

// Disponibilizar fun√ß√£o global
window.diagnosticoEnvioMensagens = executarDiagnostico;

console.log('\nüí° COMANDOS DISPON√çVEIS:');
console.log('   diagnosticoEnvioMensagens() - Executar diagn√≥stico completo');
console.log('   testarEnvioManual() - Testar envio manual');
console.log('   verificarSaude() - Verifica√ß√£o r√°pida'); 