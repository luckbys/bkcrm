const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICANDO FRONTEND PRODU√á√ÉO');
console.log('=================================');

// 1. Verificar configura√ß√£o do WebSocket
console.log('1. üîó Verificando configura√ß√£o WebSocket...');

const chatStorePath = path.join(__dirname, 'src', 'stores', 'chatStore.ts');
const useRealtimePath = path.join(__dirname, 'src', 'hooks', 'useRealtimeNotifications.ts');

if (!fs.existsSync(chatStorePath)) {
  console.log('‚ùå chatStore.ts n√£o encontrado');
  process.exit(1);
}

const chatStoreContent = fs.readFileSync(chatStorePath, 'utf8');
const useRealtimeContent = fs.existsSync(useRealtimePath) ? fs.readFileSync(useRealtimePath, 'utf8') : '';

// Verificar URLs de produ√ß√£o
const hasProductionURLs = chatStoreContent.includes('ws.bkcrm.devsible.com.br') || 
                         chatStoreContent.includes('https://ws.bkcrm.devsible.com.br');

const hasLocalURLs = chatStoreContent.includes('localhost:4000') || 
                    chatStoreContent.includes('ws://localhost:4000');

console.log('   URLs Produ√ß√£o:', hasProductionURLs ? '‚úÖ' : '‚ùå');
console.log('   URLs Local:', hasLocalURLs ? '‚úÖ' : '‚ùå');

// 2. Verificar hook de notifica√ß√µes
console.log('\n2. üì¢ Verificando hook de notifica√ß√µes...');

if (!fs.existsSync(useRealtimePath)) {
  console.log('‚ùå useRealtimeNotifications.ts n√£o encontrado');
  console.log('üí° Execute a implementa√ß√£o do hook primeiro');
} else {
  const hasWebSocketConnection = useRealtimeContent.includes('socket.on') && 
                               useRealtimeContent.includes('new-message');
  
  const hasNotifications = useRealtimeContent.includes('toast') || 
                          useRealtimeContent.includes('notification');
  
  console.log('   WebSocket Events:', hasWebSocketConnection ? '‚úÖ' : '‚ùå');
  console.log('   Notifica√ß√µes:', hasNotifications ? '‚úÖ' : '‚ùå');
}

// 3. Verificar componente de notifica√ß√µes
console.log('\n3. üéØ Verificando componente de notifica√ß√µes...');

const notificationsPath = path.join(__dirname, 'src', 'components', 'notifications', 'NotificationsDropdown.tsx');
const headerPath = path.join(__dirname, 'src', 'components', 'crm', 'Header.tsx');

if (!fs.existsSync(notificationsPath)) {
  console.log('‚ùå NotificationsDropdown.tsx n√£o encontrado');
} else {
  console.log('‚úÖ NotificationsDropdown.tsx encontrado');
}

if (!fs.existsSync(headerPath)) {
  console.log('‚ùå Header.tsx n√£o encontrado');
} else {
  const headerContent = fs.readFileSync(headerPath, 'utf8');
  const hasNotificationsImport = headerContent.includes('NotificationsDropdown');
  
  console.log('   Importado no Header:', hasNotificationsImport ? '‚úÖ' : '‚ùå');
}

// 4. Criar script de debug para produ√ß√£o
console.log('\n4. üêõ Criando script de debug para produ√ß√£o...');

const debugScript = `
// üîç DEBUG PRODU√á√ÉO - Execute no console do navegador
function debugProducao() {
  console.log('üîç DEBUG PRODU√á√ÉO');
  console.log('=================');
  
  // 1. Verificar se o hook est√° carregado
  console.log('\\n1. üì¢ Hook de notifica√ß√µes:');
  if (window.useRealtimeNotifications) {
    console.log('   ‚úÖ Hook dispon√≠vel');
  } else {
    console.log('   ‚ùå Hook n√£o encontrado');
  }
  
  // 2. Verificar WebSocket
  console.log('\\n2. üîó WebSocket:');
  if (window.chatStore && window.chatStore.socket) {
    console.log('   ‚úÖ Socket dispon√≠vel');
    console.log('   Status:', window.chatStore.socket.connected ? 'Conectado' : 'Desconectado');
  } else {
    console.log('   ‚ùå Socket n√£o encontrado');
  }
  
  // 3. Verificar componente
  console.log('\\n3. üéØ Componente de notifica√ß√µes:');
  const notificationsElement = document.querySelector('[data-testid="notifications-dropdown"]') || 
                              document.querySelector('.notifications-dropdown');
  
  if (notificationsElement) {
    console.log('   ‚úÖ Componente renderizado');
  } else {
    console.log('   ‚ùå Componente n√£o encontrado');
  }
  
  // 4. Testar conex√£o WebSocket
  console.log('\\n4. üß™ Testando conex√£o WebSocket...');
  
  if (window.chatStore && window.chatStore.socket) {
    window.chatStore.socket.emit('test-connection', { message: 'Teste produ√ß√£o' });
    console.log('   üì§ Teste enviado');
  }
  
  // 5. Verificar vari√°veis de ambiente
  console.log('\\n5. üåê Vari√°veis de ambiente:');
  console.log('   VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL);
  console.log('   VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå');
  
  // 6. Instru√ß√µes
  console.log('\\n6. üí° PR√ìXIMOS PASSOS:');
  console.log('   - Se hook n√£o encontrado: verificar import');
  console.log('   - Se socket n√£o conectado: verificar URL');
  console.log('   - Se componente n√£o renderizado: verificar Header.tsx');
  console.log('   - Se vari√°veis n√£o carregadas: verificar .env');
}

// Fun√ß√£o para testar notifica√ß√£o manual
function testarNotificacaoManual() {
  console.log('üß™ TESTANDO NOTIFICA√á√ÉO MANUAL');
  
  if (window.chatStore && window.chatStore.socket) {
    const testMessage = {
      id: 'test-' + Date.now(),
      content: 'üß™ Teste notifica√ß√£o manual: ' + new Date().toLocaleString(),
      sender: 'client',
      senderName: 'Cliente Teste',
      timestamp: new Date().toISOString(),
      ticketId: 'test-ticket'
    };
    
    window.chatStore.socket.emit('new-message', testMessage);
    console.log('‚úÖ Teste enviado via WebSocket');
  } else {
    console.log('‚ùå WebSocket n√£o dispon√≠vel');
  }
}

// Fun√ß√£o para verificar logs do webhook
function verificarLogsWebhook() {
  console.log('üìä VERIFICANDO LOGS WEBHOOK');
  
  fetch('https://bkcrm.devsible.com.br/webhook/health')
    .then(response => response.json())
    .then(data => {
      console.log('   Status:', data.status);
      console.log('   Timestamp:', data.timestamp);
      console.log('   WebSocket:', data.websocket);
    })
    .catch(error => {
      console.log('‚ùå Erro:', error.message);
    });
}

// Expor fun√ß√µes globalmente
window.debugProducao = debugProducao;
window.testarNotificacaoManual = testarNotificacaoManual;
window.verificarLogsWebhook = verificarLogsWebhook;

console.log('üîß Fun√ß√µes de debug carregadas:');
console.log('   debugProducao() - Debug completo');
console.log('   testarNotificacaoManual() - Teste manual');
console.log('   verificarLogsWebhook() - Verificar webhook');
`;

fs.writeFileSync('debug-producao.js', debugScript);
console.log('‚úÖ Script de debug criado: debug-producao.js');

// 5. Resumo e instru√ß√µes
console.log('\n5. üìã RESUMO E INSTRU√á√ïES:');
console.log('===========================');
console.log('');
console.log('üéØ PROBLEMA IDENTIFICADO:');
console.log('   O webhook de produ√ß√£o n√£o est√° usando o c√≥digo corrigido');
console.log('   Ele ainda retorna "processed: false"');
console.log('');
console.log('üîß SOLU√á√ÉO:');
console.log('   1. Deploy do arquivo corrigido em produ√ß√£o');
console.log('   2. Reiniciar container do webhook');
console.log('   3. Testar com script de debug');
console.log('');
console.log('üìÅ ARQUIVOS PREPARADOS:');
console.log('   ‚úÖ deploy-webhook/webhook-evolution-complete-corrigido.cjs');
console.log('   ‚úÖ teste-producao-corrigido.js');
console.log('   ‚úÖ debug-producao.js');
console.log('');
console.log('üöÄ PR√ìXIMOS PASSOS:');
console.log('   1. Fazer deploy em produ√ß√£o');
console.log('   2. Testar webhook corrigido');
console.log('   3. Verificar frontend com debug');
console.log('   4. Confirmar notifica√ß√µes funcionando');
console.log('');
console.log('‚úÖ VERIFICA√á√ÉO COMPLETA!'); 