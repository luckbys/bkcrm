// üîç DIAGN√ìSTICO COMPLETO - WHATSAPP BKCRM
// An√°lise completa dos problemas de envio e recebimento de mensagens

console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DO WHATSAPP...\n');

// === 1. VERIFICAR WEBHOOK WEBSOCKET ===
async function verificarWebhookWebSocket() {
  console.log('üì° 1. VERIFICANDO WEBHOOK WEBSOCKET...');
  
  try {
    const healthResponse = await fetch('http://localhost:4000/webhook/health');
    const healthData = await healthResponse.json();
    
    if (healthResponse.ok) {
      console.log('‚úÖ Webhook WebSocket: FUNCIONANDO');
      console.log(`   - Status: ${healthResponse.status}`);
      console.log(`   - Endpoints: ${healthData.endpoints?.length || 0} dispon√≠veis`);
      console.log(`   - WebSocket: ${healthData.websocket?.enabled ? 'ATIVO' : 'INATIVO'}`);
      console.log(`   - Conex√µes: ${healthData.websocket?.connections || 0}`);
      return true;
    } else {
      console.log('‚ùå Webhook WebSocket: FALHOU');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Webhook WebSocket: N√ÉO CONECTA');
    console.log(`   - Erro: ${error.message}`);
    return false;
  }
}

// === 2. VERIFICAR INST√ÇNCIA EVOLUTION API ===
async function verificarInstanciaEvolution() {
  console.log('\nüîå 2. VERIFICANDO INST√ÇNCIA EVOLUTION API...');
  
  try {
    const instanceResponse = await fetch('http://localhost:4000/webhook/check-instance/atendimento-ao-cliente-suporte');
    const instanceData = await instanceResponse.json();
    
    if (instanceResponse.ok) {
      console.log('‚úÖ Inst√¢ncia Evolution: ENCONTRADA');
      console.log(`   - Nome: ${instanceData.instance}`);
      console.log(`   - Estado: ${instanceData.state || 'N√ÉO INFORMADO'}`);
      console.log(`   - Timestamp: ${instanceData.timestamp}`);
      
      if (!instanceData.state) {
        console.log('‚ö†Ô∏è  AVISO: Estado da inst√¢ncia n√£o retornado - poss√≠vel problema na Evolution API');
      }
      
      return instanceData.state === 'open';
    } else {
      console.log('‚ùå Inst√¢ncia Evolution: ERRO');
      console.log(`   - Status: ${instanceResponse.status}`);
      console.log(`   - Erro: ${instanceData.error || 'Desconhecido'}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Inst√¢ncia Evolution: FALHA NA CONEX√ÉO');
    console.log(`   - Erro: ${error.message}`);
    return false;
  }
}

// === 3. TESTAR ENVIO DE MENSAGEM ===
async function testarEnvioMensagem() {
  console.log('\nüì§ 3. TESTANDO ENVIO DE MENSAGEM...');
  
  try {
    const testPayload = {
      phone: '5511999999999', // N√∫mero de teste
      text: `üß™ Teste diagn√≥stico - ${new Date().toLocaleString()}`,
      instance: 'atendimento-ao-cliente-suporte',
      options: {
        delay: 1000,
        presence: 'composing',
        linkPreview: false
      }
    };
    
    console.log(`   - Enviando para: ${testPayload.phone}`);
    console.log(`   - Inst√¢ncia: ${testPayload.instance}`);
    
    const sendResponse = await fetch('http://localhost:4000/webhook/send-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testPayload)
    });
    
    const sendData = await sendResponse.json();
    
    if (sendResponse.ok && sendData.success) {
      console.log('‚úÖ Envio de Mensagem: SUCESSO');
      console.log(`   - Message ID: ${sendData.messageId}`);
      console.log(`   - Status: ${sendData.status}`);
      return true;
    } else {
      console.log('‚ùå Envio de Mensagem: FALHOU');
      console.log(`   - Status HTTP: ${sendResponse.status}`);
      console.log(`   - Erro: ${sendData.error || 'Desconhecido'}`);
      
      if (sendData.details) {
        console.log('   - Detalhes do erro:');
        console.log(`     * Evolution Status: ${sendData.evolutionStatus || 'N/A'}`);
        if (sendData.details.response?.message) {
          console.log(`     * Mensagem: ${JSON.stringify(sendData.details.response.message)}`);
        }
      }
      
      return false;
    }
  } catch (error) {
    console.log('‚ùå Envio de Mensagem: ERRO INTERNO');
    console.log(`   - Erro: ${error.message}`);
    return false;
  }
}

// === 4. VERIFICAR CONFIGURA√á√ÉO EVOLUTION API ===
async function verificarConfiguracaoEvolution() {
  console.log('\n‚öôÔ∏è  4. VERIFICANDO CONFIGURA√á√ÉO EVOLUTION API...');
  
  // Verificar se as vari√°veis de ambiente est√£o corretas
  const config = {
    url: process.env.EVOLUTION_API_URL || 'https://press-evolution-api.jhkbgs.easypanel.host',
    key: process.env.EVOLUTION_API_KEY ? '***DEFINIDA***' : 'N√ÉO DEFINIDA'
  };
  
  console.log(`   - URL: ${config.url}`);
  console.log(`   - API Key: ${config.key}`);
  
  // Testar conectividade direta com Evolution API
  try {
    const directResponse = await fetch(`${config.url}/instance/connectionState/atendimento-ao-cliente-suporte`, {
      headers: {
        'apikey': process.env.EVOLUTION_API_KEY
      }
    });
    
    if (directResponse.ok) {
      const directData = await directResponse.json();
      console.log('‚úÖ Conex√£o Direta Evolution: FUNCIONANDO');
      console.log(`   - Estado: ${directData.state}`);
      return directData.state === 'open';
    } else {
      console.log('‚ùå Conex√£o Direta Evolution: FALHOU');
      console.log(`   - Status: ${directResponse.status}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Conex√£o Direta Evolution: ERRO');
    console.log(`   - Erro: ${error.message}`);
    return false;
  }
}

// === 5. VERIFICAR FRONTEND ===
async function verificarFrontend() {
  console.log('\nüñ•Ô∏è  5. VERIFICANDO FRONTEND...');
  
  // Verificar se o frontend est√° tentando usar os endpoints corretos
  console.log('   - Verificando configura√ß√£o do useEvolutionSender...');
  
  // Simular chamada do frontend
  try {
    const frontendTest = await fetch('http://localhost:4000/webhook/send-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        phone: '5511888888888',
        text: 'Teste do frontend',
        instance: 'atendimento-ao-cliente-suporte'
      })
    });
    
    const frontendData = await frontendTest.json();
    
    console.log(`   - Endpoint acess√≠vel: ${frontendTest.status === 200 || frontendTest.status === 400 ? 'SIM' : 'N√ÉO'}`);
    console.log(`   - Resposta: ${frontendData.success ? 'SUCESSO' : 'ERRO'}`);
    
    return true;
  } catch (error) {
    console.log('‚ùå Frontend: ERRO DE CONECTIVIDADE');
    console.log(`   - Erro: ${error.message}`);
    return false;
  }
}

// === 6. AN√ÅLISE DE LOGS ===
function analisarLogs() {
  console.log('\nüìã 6. AN√ÅLISE DE LOGS E RECOMENDA√á√ïES...');
  
  console.log('\nüîç POSS√çVEIS CAUSAS DOS PROBLEMAS:');
  console.log('   1. Inst√¢ncia Evolution API desconectada do WhatsApp');
  console.log('   2. N√∫mero de teste inv√°lido ou n√£o existe no WhatsApp');
  console.log('   3. API Key da Evolution API expirada ou inv√°lida');
  console.log('   4. Firewall bloqueando conex√µes');
  console.log('   5. Evolution API em manuten√ß√£o');
  
  console.log('\nüí° SOLU√á√ïES RECOMENDADAS:');
  console.log('   1. Reconectar inst√¢ncia WhatsApp na Evolution API');
  console.log('   2. Usar n√∫mero real de WhatsApp para teste');
  console.log('   3. Verificar/renovar API Key');
  console.log('   4. Verificar logs da Evolution API');
  console.log('   5. Testar com inst√¢ncia diferente');
}

// === EXECUTAR DIAGN√ìSTICO COMPLETO ===
async function executarDiagnosticoCompleto() {
  console.log('üöÄ EXECUTANDO DIAGN√ìSTICO COMPLETO...\n');
  
  const resultados = {
    webhook: false,
    instancia: false,
    envio: false,
    configuracao: false,
    frontend: false
  };
  
  resultados.webhook = await verificarWebhookWebSocket();
  resultados.instancia = await verificarInstanciaEvolution();
  resultados.envio = await testarEnvioMensagem();
  resultados.configuracao = await verificarConfiguracaoEvolution();
  resultados.frontend = await verificarFrontend();
  
  analisarLogs();
  
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`Webhook WebSocket:     ${resultados.webhook ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`Inst√¢ncia Evolution:   ${resultados.instancia ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`Envio de Mensagem:     ${resultados.envio ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`Configura√ß√£o API:      ${resultados.configuracao ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`Frontend:              ${resultados.frontend ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  const totalOk = Object.values(resultados).filter(Boolean).length;
  const totalTestes = Object.keys(resultados).length;
  
  console.log(`\nüéØ RESULTADO GERAL: ${totalOk}/${totalTestes} testes passaram`);
  
  if (totalOk === totalTestes) {
    console.log('üéâ SISTEMA TOTALMENTE FUNCIONAL!');
  } else if (totalOk >= 3) {
    console.log('‚ö†Ô∏è  SISTEMA PARCIALMENTE FUNCIONAL - Verificar falhas');
  } else {
    console.log('üö® SISTEMA COM PROBLEMAS CR√çTICOS - Corre√ß√£o necess√°ria');
  }
  
  return resultados;
}

// Executar se chamado diretamente
if (typeof window === 'undefined') {
  // Node.js
  executarDiagnosticoCompleto().catch(console.error);
} else {
  // Browser
  window.diagnosticarWhatsApp = executarDiagnosticoCompleto;
  console.log('üí° Execute: diagnosticarWhatsApp() para iniciar o diagn√≥stico');
}

module.exports = { executarDiagnosticoCompleto }; 