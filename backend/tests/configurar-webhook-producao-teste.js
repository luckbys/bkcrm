// üß™ Configurar Webhook para Produ√ß√£o (TESTE TEMPOR√ÅRIO)
// Este script configura o webhook para produ√ß√£o para testar se funciona

const EVOLUTION_API_URL = 'https://press-evolution-api.jhkbgs.easypanel.host';
const API_KEY = '429683C4C977415CAAFCCE10F7D57E11';
const INSTANCE_NAME = 'atendimento-ao-cliente-sac1';
const WEBHOOK_PRODUCAO = 'https://bkcrm.devsible.com.br/webhook/evolution';

async function makeRequest(endpoint, method = 'GET', data = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'apikey': API_KEY
    }
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    console.log(`üì° ${method} ${EVOLUTION_API_URL}${endpoint}`);
    if (data) {
      console.log(`üìã Payload:`, JSON.stringify(data, null, 2));
    }
    
    const response = await fetch(`${EVOLUTION_API_URL}${endpoint}`, options);
    const result = await response.json();
    
    console.log(`üìä Status: ${response.status} ${response.statusText}`);
    console.log(`üìã Resposta:`, JSON.stringify(result, null, 2));
    
    return { success: response.ok, data: result, status: response.status };
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o:`, error.message);
    return { success: false, error: error.message };
  }
}

async function configurarProducaoTeste() {
  console.log('üß™ CONFIGURANDO WEBHOOK PARA PRODU√á√ÉO (TESTE)');
  console.log('='.repeat(50));
  console.log(`üè∑Ô∏è Inst√¢ncia: ${INSTANCE_NAME}`);
  console.log(`üì° Webhook Produ√ß√£o: ${WEBHOOK_PRODUCAO}`);
  console.log('');
  console.log('‚ö†Ô∏è ATEN√á√ÉO: Isso √© apenas um teste!');
  console.log('üí° Se funcionar, confirma que o problema √© conectividade local');
  console.log('');

  // 1. Verificar webhook atual
  console.log('1Ô∏è‚É£ Verificando webhook atual...');
  await makeRequest(`/webhook/find/${INSTANCE_NAME}`);
  console.log('');

  // 2. Configurar para produ√ß√£o
  console.log('2Ô∏è‚É£ Configurando webhook para PRODU√á√ÉO...');
  const webhookConfig = {
    webhook: {
      url: WEBHOOK_PRODUCAO,
      events: [
        'MESSAGES_UPSERT',
        'CONNECTION_UPDATE',
        'QRCODE_UPDATED',
        'SEND_MESSAGE'
      ],
      webhook_by_events: true,
      webhook_base64: false,
      enabled: true
    }
  };
  
  const resultado = await makeRequest(`/webhook/set/${INSTANCE_NAME}`, 'POST', webhookConfig);
  console.log('');

  // 3. Verificar se funcionou
  console.log('3Ô∏è‚É£ Verificando configura√ß√£o...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  const webhookFinal = await makeRequest(`/webhook/find/${INSTANCE_NAME}`);
  
  if (webhookFinal.success && webhookFinal.data.url === WEBHOOK_PRODUCAO) {
    console.log('');
    console.log('‚úÖ SUCESSO! Webhook configurado para produ√ß√£o!');
    console.log('');
    console.log('üß™ TESTE AGORA:');
    console.log('1. Envie uma mensagem WhatsApp para o n√∫mero conectado');
    console.log('2. Verifique se aparece no CRM de produ√ß√£o');
    console.log('3. Se funcionar, confirma que o problema √© conectividade local');
    console.log('');
    console.log('üîÑ PARA VOLTAR AO LOCAL:');
    console.log('1. Use ngrok para expor localhost:4000');
    console.log('2. Configure webhook com URL do ngrok');
    console.log('3. Ou fa√ßa deploy do webhook em servidor p√∫blico');
  } else {
    console.log('');
    console.log('‚ùå Erro ao configurar webhook para produ√ß√£o');
  }
}

// Executar configura√ß√£o
configurarProducaoTeste().catch(console.error); 