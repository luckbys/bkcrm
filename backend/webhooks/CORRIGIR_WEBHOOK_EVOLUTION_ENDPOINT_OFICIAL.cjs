/**
 * CORRE√á√ÉO - ENDPOINT OFICIAL EVOLUTION API V2
 * 
 * Usa o endpoint oficial correto: POST /webhook/instance
 */

const axios = require('axios');

// Configura√ß√µes
const EVOLUTION_API_URL = 'https://press-evolution-api.jhkbgs.easypanel.host';
const API_KEY = '429683C4C977415CAAFCCE10F7D57E11';
const WEBHOOK_URL_LOCAL = 'http://localhost:4000/webhook/evolution';
const INSTANCE_NAME = 'atendimento-ao-cliente-sac1';

console.log('üîß CORRIGINDO WEBHOOK COM ENDPOINT OFICIAL V2\n');

async function testarWebhookLocal() {
  try {
    console.log('üß™ Testando webhook local...');
    
    const response = await axios.get('http://localhost:4000/webhook/health');
    console.log('‚úÖ Webhook local funcionando:', response.data);
    return true;
    
  } catch (error) {
    console.error('‚ùå Webhook local n√£o est√° funcionando:', error.message);
    return false;
  }
}

async function configurarWebhookOficial() {
  try {
    console.log('üîß Configurando webhook com endpoint oficial...');
    console.log(`üì° URL: ${EVOLUTION_API_URL}/webhook/instance`);
    console.log(`üéØ Inst√¢ncia: ${INSTANCE_NAME}`);
    console.log(`üîó Webhook URL: ${WEBHOOK_URL_LOCAL}`);
    
    const webhookConfig = {
      instanceName: INSTANCE_NAME,
      enabled: true,
      url: WEBHOOK_URL_LOCAL,
      webhook_by_events: false,
      webhook_base64: false,
      events: [
        'MESSAGES_UPSERT',
        'CONNECTION_UPDATE',
        'QRCODE_UPDATED',
        'SEND_MESSAGE'
      ]
    };
    
    console.log('üìã Configura√ß√£o:', JSON.stringify(webhookConfig, null, 2));
    
    const response = await axios.post(
      `${EVOLUTION_API_URL}/webhook/instance`,
      webhookConfig,
      {
        headers: {
          'apikey': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Webhook configurado com sucesso!');
    console.log('üìä Resposta:', JSON.stringify(response.data, null, 2));
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar webhook:');
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('   Erro:', error.message);
    }
    
    return false;
  }
}

async function verificarWebhookConfigurado() {
  try {
    console.log('üîç Verificando webhook configurado...');
    
    const response = await axios.get(
      `${EVOLUTION_API_URL}/webhook/find/${INSTANCE_NAME}`,
      {
        headers: {
          'apikey': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Webhook encontrado:');
    console.log('üìä Configura√ß√£o atual:', JSON.stringify(response.data, null, 2));
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar webhook:');
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('   Erro:', error.message);
    }
    
    return null;
  }
}

async function executarCorrecao() {
  try {
    console.log('üöÄ INICIANDO CORRE√á√ÉO COM ENDPOINT OFICIAL...\n');
    
    // 1. Verificar se webhook local est√° funcionando
    const localOk = await testarWebhookLocal();
    
    if (!localOk) {
      console.log('‚ùå Webhook local n√£o est√° funcionando!');
      console.log('üí° Execute: node webhook-evolution-complete.js');
      return;
    }
    
    console.log('\n' + '='.repeat(50));
    
    // 2. Verificar configura√ß√£o atual do webhook
    console.log('üìã VERIFICANDO CONFIGURA√á√ÉO ATUAL...\n');
    const webhookAtual = await verificarWebhookConfigurado();
    
    console.log('\n' + '='.repeat(50));
    
    // 3. Configurar webhook com endpoint oficial
    console.log('üîß CONFIGURANDO WEBHOOK...\n');
    const sucesso = await configurarWebhookOficial();
    
    console.log('\n' + '='.repeat(50));
    
    if (sucesso) {
      console.log('üéâ WEBHOOK CONFIGURADO COM SUCESSO!');
      
      // 4. Verificar configura√ß√£o ap√≥s mudan√ßa
      console.log('\nüìã VERIFICANDO NOVA CONFIGURA√á√ÉO...\n');
      await verificarWebhookConfigurado();
      
      console.log('\nüí° TESTE AGORA:');
      console.log('   1. Envie uma mensagem WhatsApp para a inst√¢ncia');
      console.log('   2. Verifique os logs do webhook local');
      console.log('   3. Confirme se o ticket √© criado automaticamente no CRM');
      
      console.log('\nüì± MONITORAMENTO:');
      console.log('   - Logs do webhook: verifique o terminal onde est√° rodando o webhook');
      console.log('   - Logs da Evolution API: verifique se n√£o h√° mais erros 404');
      console.log('   - CRM: verifique se novos tickets aparecem automaticamente');
      
    } else {
      console.log('‚ùå FALHA NA CONFIGURA√á√ÉO DO WEBHOOK');
      console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
      console.log('   1. Verificar se a API key est√° correta');
      console.log('   2. Verificar se a inst√¢ncia existe e est√° ativa');
      console.log('   3. Verificar se o servidor Evolution API est√° acess√≠vel');
      console.log('   4. Verificar se o webhook local est√° realmente funcionando');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO NA CORRE√á√ÉO:', error);
  }
}

// Executar corre√ß√£o
executarCorrecao(); 